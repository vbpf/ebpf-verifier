# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: simple invalid write

pre: ["meta_offset=0",
      "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
      "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset", "packet_size=[0, 65534]"]

code:
  <start>: |
    r4 = 0
    *(u64 *)(r1 + 0) = r4

post: ["meta_offset=0",
       "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
       "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset",
       "packet_size=[0, 65534]", "r4.type=number", "r4.svalue=0", "r4.uvalue=0"]
messages:
  - "1: Upper bound must be at most packet_size (valid_access(r1.offset, width=8) for write)"

---
test-case: simple invalid read

pre: ["meta_offset=0",
      "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
      "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset", "packet_size=[0, 65534]"]

code:
  <start>: |
    r4 = *(u64 *)(r1 + 0)

post: ["meta_offset=0",
       "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
       "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset",
       "packet_size=[0, 65534]", "r4.type=number"]
messages:
  - "0: Upper bound must be at most packet_size (valid_access(r1.offset, width=8) for read)"

---
test-case: writing 8 bytes when packet size is 4

pre: ["meta_offset=0",
      "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
      "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset"]

code:
  <start>: |
    r3 = r1;
    r3 += 4;
    if r3 > r2 goto <out>
    r4 = 0
    *(u64 *)(r1 + 0) = r4
  <out>: |
    r5=r5

post: ["meta_offset=0",
       "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
       "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset",
       "r3.type=packet", "r3.packet_offset=4", "r3.svalue=[4102, 2147418116]", "r3.uvalue=[4102, 2147418116]",
       "r3.svalue=r3.uvalue",
       "packet_size-r3.packet_offset<=65530", "packet_size=[0, 65534]",
       "r3.packet_offset-packet_size<=4", "r3.svalue=r1.svalue+4", "r3.uvalue=r1.svalue+4",
       "r2.packet_offset-r3.packet_offset<=65530", "r3.packet_offset-r2.packet_offset<=4"]
messages:
  - "4: Upper bound must be at most packet_size (valid_access(r1.offset, width=8) for write)"

---
test-case: simple valid access

pre: ["meta_offset=0",
      "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
      "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset"]

code:
  <start>: |
    r3 = r1;
    r3 += 8;
    if r3 > r2 goto <out>
    r4 = 0
    *(u64 *)(r1 + 0) = r4
  <out>: |
    r5=r5

post: ["meta_offset=0",
       "r1.type=packet", "r1.packet_offset=0", "r1.svalue=[4098, 2147418112]", "r1.uvalue=[4098, 2147418112]",
       "r2.type=packet", "r2.packet_offset=[0, 65534]", "packet_size=r2.packet_offset",
       "r3.type=packet", "r3.packet_offset=8", "r3.svalue=[4106, 2147418120]", "r3.uvalue=[4106, 2147418120]",
       "packet_size-r3.packet_offset<=65526", "packet_size=[0, 65534]",
       "r3.packet_offset-packet_size<=8", "r3.svalue=r1.svalue+8", "r3.uvalue=r1.svalue+8",
       "r3.svalue=r3.uvalue",
       "r2.packet_offset-r3.packet_offset<=65526", "r3.packet_offset-r2.packet_offset<=8"]
---
test-case: legacy 1 byte packet access imm

pre: ["r1.type=number",
      "r6.type=ctx", "r6.ctx_offset=0"]

code:
  <start>: |
    r0 = *(u8 *)skb[23]

post: ["r0.type=number",
       "r6.type=ctx", "r6.ctx_offset=0"]
---
test-case: legacy 2 byte packet access imm

pre: ["r1.type=number",
      "r6.type=ctx", "r6.ctx_offset=0"]

code:
  <start>: |
    r0 = *(u16 *)skb[23]

post: ["r0.type=number",
       "r6.type=ctx", "r6.ctx_offset=0"]
---
test-case: legacy 4 byte packet access imm

pre: ["r1.type=number",
      "r6.type=ctx", "r6.ctx_offset=0"]

code:
  <start>: |
    r0 = *(u32 *)skb[23]

post: ["r0.type=number",
       "r6.type=ctx", "r6.ctx_offset=0"]
---
test-case: legacy 1 byte packet access reg

pre: ["r1.type=number",
      "r6.type=ctx", "r6.ctx_offset=0",
      "r7.type=number", "r7.svalue=23", "r7.uvalue=23"]

code:
  <start>: |
    r0 = *(u8 *)skb[r7]

post: ["r0.type=number",
       "r6.type=ctx", "r6.ctx_offset=0",
       "r7.type=number", "r7.svalue=23", "r7.uvalue=23"]
---
test-case: legacy 2 byte packet access reg

pre: ["r1.type=number",
      "r6.type=ctx", "r6.ctx_offset=0",
      "r7.type=number", "r7.svalue=23", "r7.uvalue=23"]

code:
  <start>: |
    r0 = *(u16 *)skb[r7]

post: ["r0.type=number",
       "r6.type=ctx", "r6.ctx_offset=0",
       "r7.type=number", "r7.svalue=23", "r7.uvalue=23"]
---
test-case: legacy 4 byte packet access reg

pre: ["r1.type=number",
      "r6.type=ctx", "r6.ctx_offset=0",
      "r7.type=number", "r7.svalue=23", "r7.uvalue=23"]

code:
  <start>: |
    r0 = *(u32 *)skb[r7]

post: ["r0.type=number",
       "r6.type=ctx", "r6.ctx_offset=0",
       "r7.type=number", "r7.svalue=23", "r7.uvalue=23"]
