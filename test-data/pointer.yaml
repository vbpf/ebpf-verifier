# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: 32-bit pointer truncation - addition

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 += 0
    r2 = *(u32 *)(r1 + 0)

post: []

messages:
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - subtraction

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 -= 0
    r2 = *(u32 *)(r1 + 0)

post: []

messages:
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - multiplication

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 *= 1
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - division

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 /= 1
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - modulo

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 %= 0
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - signed division

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 s/= 1
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - signed modulo

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 s%= 0
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - AND

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 &= -1
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - OR

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 |= 0
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - XOR

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 ^= 0
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - LSH

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 <<= 0
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - RSH

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 >>= 0
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - ARSH

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 s>>= 0
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type in {ctx, stack, packet, shared})"
  - "1: Invalid type (valid_access(r1.offset, width=4) for read)"

---
test-case: 32-bit pointer truncation - NOT

pre:
  - "r1.ctx_offset=0"
  - "r1.svalue=[0, 4294967295]"
  - "r1.uvalue=r1.svalue"
  - "r1.type=ctx"
  - "r1.uvalue=[0, 4294967295]"

# Trigger 32-bit ALU operation without changing the value
code:
  <start>: |
    w1 = - w1
    w1 = - w1
    r2 = *(u32 *)(r1 + 0)

post:
  - "r1.type=ctx"

messages:
  - "0: Invalid type (r1.type == number)"
  - "1: Invalid type (r1.type == number)"
  - "2: Lower bound must be at least 0 (valid_access(r1.offset, width=4) for read)"
  - "2: Upper bound must be at most 64 (valid_access(r1.offset, width=4) for read)"

---
test-case: 64-bit return context pointer

pre:
  - r0.uvalue=[0, 4294967295]
  - r0.uvalue=r0.svalue
  - r0.type=number
  - r1.ctx_offset=0
  - r1.svalue=[0, 4294967295]
  - r1.uvalue=r1.svalue
  - r1.type=ctx
  - r1.uvalue=[0, 4294967295]

code:
  <start>: |
    r0 = r1
    exit

post:
  - r0.uvalue=r0.svalue
  - r1.uvalue=r0.svalue
  - r1.svalue=r0.svalue
  - r0.ctx_offset=0
  - r0.svalue=[0, 4294967295]
  - r0.type=ctx
  - r1.ctx_offset=0
  - r1.type=ctx

messages:
  - "1: Invalid type (r0.type == number)"

---
# Verify that truncating a pointer and converting it to a number triggers a warning.
test-case: 32-bit return context pointer

pre:
  - r0.uvalue=0
  - r0.uvalue=r0.svalue
  - r0.type=number
  - r1.ctx_offset=0
  - r1.svalue=1234567890
  - r1.uvalue=r1.svalue
  - r1.type=ctx
  - r1.uvalue=1234567890

code:
  <start>: |
    w0 = w1

post:
  - r1.ctx_offset=0
  - r1.svalue=1234567890
  - r1.uvalue=r1.svalue
  - r1.type=ctx
  - r0.svalue=1234567890
  - r0.type=number
  - r0.uvalue=1234567890

messages:
  - "0: Invalid type (r1.type == number)"
