# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: add immediate to large singleton number

pre: ["r0.type=number", "r0.svalue=2147483647", "r0.uvalue=2147483647"]

code:
  <start>: |
    r0 += 2 ; make sure value does not become a negative 64 bit number

post:
  - r0.type=number
  - r0.svalue=2147483649
  - r0.uvalue=2147483649
---
test-case: add immediate to large number range

pre: ["r0.type=number", "r0.svalue=[2147483645, 2147483647]", "r0.uvalue=[2147483645, 2147483647]"]

code:
  <start>: |
    r0 += 4 ; make sure value does not become a negative 64 bit number

post:
  - r0.type=number
  - r0.svalue=[2147483649, 2147483651]
  - r0.uvalue=r0.svalue
---
test-case: add immediate to unknown number

pre: ["r1.type=number"]

code:
  <start>: |
    r1 += 0

post: ["r1.type=number"]
---
test-case: add number register to unknown number

pre: ["r1.type=number", "r2.type=number"]

code:
  <start>: |
    r1 += r2

post: ["r1.type=number", "r2.type=number"]
---
test-case: add immediate to singleton number

pre: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5"]

code:
  <start>: |
    r1 += 3

post:
  - r1.type=number
  - r1.svalue=8
  - r1.uvalue=8
---
test-case: add constant register to singleton number

pre: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
      "r2.type=number", "r2.svalue=7", "r2.uvalue=7"]

code:
  <start>: |
    r1 += r2

post:
  - r1.type=number
  - r1.svalue=12
  - r1.uvalue=12
  - r2.type=number
  - r2.svalue=7
  - r2.uvalue=7

---
test-case: add immediate to finite interval number

pre: ["r1.type=number", "r1.svalue=[5, 10]", "r1.uvalue=[5, 10]"]

code:
  <start>: |
    r1 += 5

post:
  - r1.type=number
  - r1.svalue=[10, 15]
  - r1.uvalue=r1.svalue

---
test-case: add constant register number to finite interval number

pre: ["r1.type=number", "r1.svalue=[5, 10]", "r1.uvalue=[5, 10]",
      "r2.type=number", "r2.svalue=5", "r2.uvalue=5"]

code:
  <start>: |
    r1 += r2

post:
  - r1.type=number
  - r1.svalue=[10, 15]
  - r2.type=number
  - r2.svalue=5
  - r2.uvalue=5
  - r1.uvalue=r1.svalue
  - r1.svalue-r2.svalue<=10
  - r2.svalue-r1.svalue<=-5

---
test-case: add interval number register to constant register pointer

pre: ["r2.type=packet", "r2.packet_offset=0", "r2.svalue=[7, 11]", "r2.uvalue=[7, 11]",
      "r7.type=number", "r7.svalue=[3, 5]", "r7.uvalue=[3, 5]"]

code:
  <start>: |
    r2 += r7

post:
  - r2.type=packet
  - r2.packet_offset=[3, 5]
  - r2.svalue=[10, 16]
  - r2.uvalue=r2.svalue
  - r7.type=number
  - r7.uvalue=[3, 5]
  - r2.packet_offset-r2.svalue<=-7
  - r2.svalue-r2.packet_offset<=11
  - r7.svalue=r2.packet_offset

---
test-case: add constant register pointer to interval number

pre: ["r2.type=packet", "r2.packet_offset=0", "r2.svalue=[7, 11]", "r2.uvalue=[7, 11]",
      "r7.type=number", "r7.svalue=[3, 5]", "r7.uvalue=[3, 5]"]

code:
  <start>: |
    r7 += r2

post:
  - r7.type=packet
  - r7.packet_offset=[3, 5]
  - r7.svalue=[10, 16]
  - r7.uvalue=r7.svalue
  - r2.type=packet
  - r2.packet_offset=0
  - r2.svalue=[7, 11]
  - r2.uvalue=[7, 11]
  - r2.svalue-r7.svalue<=-3
  - r7.svalue-r2.svalue<=5
  - r2.packet_offset-r7.packet_offset<=-3
  - r7.packet_offset-r2.packet_offset<=5
  - r7.packet_offset-r7.svalue<=-7
  - r7.svalue-r7.packet_offset<=11
