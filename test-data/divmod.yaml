# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: integer divided by non-integer

pre: ["r1.type=number", "r1.value=6", "r2.value=1"]

code:
  <start>: |
    r1 /= r2

post:
  - r1.type=number
  - r1.value=6
  - r2.value=1

messages:
  - "0: Only numbers can be used as divisors (r2 != 0)"
---
test-case: non-zero divided by zero immediate

pre: ["r1.type=number", "r1.value=6"]

code:
  <start>: |
    r1 /= 0

post:
  - r1.type=number
  - r1.value=0
---
test-case: zero divided by zero immediate

pre: ["r1.type=number", "r1.value=0"]

code:
  <start>: |
    r1 /= 0

post:
  - r1.type=number
  - r1.value=0
---
test-case: non-zero divided by zero register

pre: ["r1.type=number", "r1.value=6", "r2.type=number", "r2.value=0"]

code:
  <start>: |
    r1 /= r2

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=0

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero divided by zero register without warning

options: ["allow_division_by_zero"]

pre: ["r1.type=number", "r1.value=6", "r2.type=number", "r2.value=0"]

code:
  <start>: |
    r1 /= r2

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=0
---
test-case: zero divided by zero register

pre: ["r1.type=number", "r1.value=0", "r2.type=number", "r2.value=0"]

code:
  <start>: |
    r1 /= r2

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=0

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero divided by possibly zero register

pre: ["r1.type=number", "r1.value=6", "r2.type=number", "r2.value=[-5, 5]"]

code:
  <start>: |
    r1 /= r2  ; this could divide by 0

post:
  - r1.type=number
  - r1.value=[-6, 6]
  - r2.type=number
  - r2.value=[-5, 5]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: zero divided by possibly zero register

pre: ["r1.type=number", "r1.value=0", "r2.type=number", "r2.value=[-5, 5]"]

code:
  <start>: |
    r1 /= r2 ; this could divide by 0 but ok to set to 0

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=[-5, 5]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero divided by possibly zero register 2

pre: ["r1.type=number", "r1.value=6", "r2.type=number", "r2.value=[-5, 0]"]

code:
  <start>: |
    r1 /= r2  ; this could divide by 0

post:
  - r1.type=number
  - r1.value=[-6, 0]
  - r2.type=number
  - r2.value=[-5, 0]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: zero divided by possibly zero register 2

pre: ["r1.type=number", "r1.value=0", "r2.type=number", "r2.value=[-5, 0]"]

code:
  <start>: |
    r1 /= r2 ; this could divide by 0 but ok to set to 0

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=[-5, 0]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero divided by undefined value register

pre: ["r1.type=number", "r1.value=6", "r2.type=number"]

code:
  <start>: |
    r1 /= r2  ; this could divide by 0

post:
  - r1.type=number
  - r2.type=number

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: zero divided by undefined value register

pre: ["r1.type=number", "r1.value=0", "r2.type=number"]

code:
  <start>: |
    r1 /= r2  ; this could divide by 0

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero modulo zero immediate

pre: ["r1.type=number", "r1.value=-6"]

code:
  <start>: |
    r1 %= 0

post:
  - r1.type=number
  - r1.value=-6
---
test-case: zero modulo zero immediate

pre: ["r1.type=number", "r1.value=0"]

code:
  <start>: |
    r1 %= 0

post:
  - r1.type=number
  - r1.value=0
---
test-case: non-zero modulo zero register

pre: ["r1.type=number", "r1.value=-6", "r2.type=number", "r2.value=0"]

code:
  <start>: |
    r1 %= r2

post:
  - r1.type=number
  - r1.value=-6
  - r2.type=number
  - r2.value=0

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero modulo zero register without warning

options: ["allow_division_by_zero"]

pre: ["r1.type=number", "r1.value=-6", "r2.type=number", "r2.value=0"]

code:
  <start>: |
    r1 %= r2

post:
  - r1.type=number
  - r1.value=-6
  - r2.type=number
  - r2.value=0
---
test-case: zero modulo zero register

pre: ["r1.type=number", "r1.value=0", "r2.type=number", "r2.value=0"]

code:
  <start>: |
    r1 %= r2

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=0

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero modulo possibly zero register

pre: ["r1.type=number", "r1.value=6", "r2.type=number", "r2.value=[-5, 5]"]

code:
  <start>: |
    r1 %= r2 ; this could do modulo 0 so could set r1 = r2

post:
  - r1.type=number
  - r1.value=[0, 6]
  - r2.type=number
  - r2.value=[-5, 5]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: zero modulo possibly zero register

pre: ["r1.type=number", "r1.value=0", "r2.type=number", "r2.value=[-5, 5]"]

code:
  <start>: |
    r1 %= r2 ; this could do modulo 0 so could set r1 = r2

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=[-5, 5]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero modulo possibly zero register 2

pre: ["r1.type=number", "r1.value=6", "r2.type=number", "r2.value=[-5, 0]"]

code:
  <start>: |
    r1 %= r2 ; this could do modulo 0 so could set r1 = r2

post:
  - r1.type=number
  - r1.value=[0, 6]
  - r2.type=number
  - r2.value=[-5, 0]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: zero modulo possibly zero register 2

pre: ["r1.type=number", "r1.value=0", "r2.type=number", "r2.value=[-5, 0]"]

code:
  <start>: |
    r1 %= r2 ; this could do modulo 0 so could set r1 = r2

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number
  - r2.value=[-5, 0]

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: non-zero modulo undefined value register

pre: ["r1.type=number", "r1.value=6", "r2.type=number"]

code:
  <start>: |
    r1 %= r2  ; this could be modulo 0

post:
  - r1.type=number
  - r1.value=[0, 6]
  - r2.type=number

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: zero modulo undefined value register

pre: ["r1.type=number", "r1.value=0", "r2.type=number"]

code:
  <start>: |
    r1 %= r2  ; this could be modulo 0

post:
  - r1.type=number
  - r1.value=0
  - r2.type=number

messages:
  - "0: Possible division by zero (r2 != 0)"
---
test-case: negative modulo positive

pre: ["r1.type=number", "r1.value=-13"]

code:
  <start>: |
    r1 %= 3

post:
  - r1.type=number
  - r1.value=-1
---
test-case: positive modulo negative

pre: ["r1.type=number", "r1.value=13"]

code:
  <start>: |
    r1 %= -3

post:
  - r1.type=number
  - r1.value=1
---
test-case: positive modulo negative range

pre: ["r1.type=number", "r1.value=13", "r2.type=number", "r2.value=[-3, -2]"]

code:
  <start>: |
    r1 %= -3

post:
  - r1.type=number
  - r1.value=1
  - r2.type=number
  - r2.value=[-3, -2]
---
test-case: negative modulo negative

pre: ["r1.type=number", "r1.value=-13"]

code:
  <start>: |
    r1 %= -3

post:
  - r1.type=number
  - r1.value=-1
---
test-case: negative modulo negative range

pre: ["r1.type=number", "r1.value=-13", "r2.type=number", "r2.value=[-3, -2]"]

code:
  <start>: |
    r1 %= -3

post:
  - r1.type=number
  - r1.value=-1
  - r2.type=number
  - r2.value=[-3, -2]
---
test-case: smaller modulo larger

pre: ["r1.type=number", "r1.value=6", "r2.type=number", "r2.value=[7, 10]"]

code:
  <start>: |
    r1 %= r2

post:
  - r1.type=number
  - r1.value=6
  - r2.type=number
  - r2.value=[7, 10]
