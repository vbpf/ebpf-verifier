# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: while loop, unsigned gte
options: ["termination"]
pre: []

code:
  <start>: |
    r0 = 0
  <loop>: |
    if r0 >= 4 goto <out>
    r0 += 1
    goto <loop>
  <out>: |
    exit

post:
  - "r0.type=number"
  - "r0.svalue=4"
  - "r0.uvalue=r0.svalue"
  - "pc[1]=5"
  - "pc[1]=r0.svalue+1"
---
test-case: until loop, unsigned leq
options: ["termination"]
pre: []

code:
  <start>: |
    r0 = 0
  <loop>: |
    r0 += 1
    if r0 <= 3 goto <loop>
  <out>: |
    exit

post:
  - r0.uvalue=pc[1]
  - r0.svalue=pc[1]
  - r0.type=number
  - pc[1]=4
---
test-case: while loop, signed gte
options: ["termination"]
pre: []

code:
  <start>: |
    r0 = 0
  <loop>: |
    if r0 s>= 4 goto <out>
    r0 += 1
    goto <loop>
  <out>: |
    exit

post:
  - r0.type=number
  - r0.svalue=4
  - r0.uvalue=r0.svalue
  - pc[1]=5
  - pc[1]=r0.svalue+1
---
test-case: until loop, signed leq
options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 0
  <loop>: |
    r0 += 1
    if r0 s<= 3 goto <loop>
  <out>: |
    exit

post:
  - r0.uvalue=pc[1]
  - r0.svalue=pc[1]
  - r0.type=number
  - pc[1]=4
---
test-case: loop with data dependence, unsigned leq
options: ["termination"]

pre: ["r1.type=number", "r2.type=number", "r3.type=number"]

code:
  <start>: |
    r0 = 0
  <loop>: |
    r0 += 1
    r1 += r2
    if r1 > r3 goto <out>
    if r0 <= 3 goto <loop>
  <out>: |
    exit

post:
  - r0.uvalue=pc[1]
  - r0.svalue=pc[1]
  - r0.type=number
  - r1.type=number
  - r2.type=number
  - r3.type=number
  - pc[1]=[1, 4]
---
test-case: while loop, eq
# options: ["termination"]
pre: []

code:
  <start>: |
    r0 = 0
  <loop>: |
    if r0 == 4 goto <out>
    r0 += 1
    goto <loop>
  <out>: |
    exit

post:
  - "r0.type=number"
  - "r0.svalue=4"
  - "r0.uvalue=4"
#  - "r0.uvalue=r0.svalue"
#  - "pc[1]=4"
#  - "pc[1]=r0.value"
---
test-case: until loop, neq
# options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 0
  <loop>: |
    r0 += 1
    if r0 != 9 goto <loop>
  <out>: |
    exit

post:
  - "r0.type=number"
  - "r0.svalue=9"
  - "r0.uvalue=9"
#  - "r0.uvalue=r0.svalue"
#  - "pc[1]=9"
#  - "pc[1]=r0.value"
---
test-case: simple infinite loop, neq
options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 0
  <loop>: |
    r0 += 2
    if r0 != 9 goto <loop>
  <out>: |
    exit

post:
  - "r0.type=number"
  - "r0.svalue=9"
  - "r0.uvalue=9"
  # - "r0.uvalue=r0.svalue"
  - "pc[1]=[1, +oo]"

messages:
  - "1 (counter): Loop counter is too large (pc[1] < 100000)"

---
test-case: realistic forward loop
options: ["termination"]

pre: [
  "meta_offset=[-4098, 0]",
  "packet_size=[0, 65534]",
  "r1.ctx_offset=0", "r1.svalue=[1, 2147418112]", "r1.type=ctx",
]

code:
  <start>: |
    r0 = 0
    r2 = *(u32 *)(r1 + 4)
    r1 = *(u32 *)(r1 + 0)
    assume r2 != r1
    r2 -= r1
    r3 = 0
    r0 = 0
  #    r2 <<= 32; this fails with "11: Upper bound must be at most packet_size (valid_access(r4.offset, width=1) for read)"
  #    r2 >>= 32
  <loop>: |
    r4 = r1
    r4 += r3
    r4 = *(u8 *)(r4 + 0)
    r0 += r4
    r3 += 1
    if r4 == r3 goto <exit>
    assume r2 > r3
    goto <loop>
  <exit>: |
    exit

post:
  - r2.uvalue=packet_size
  - r2.svalue=packet_size
  - r3.uvalue=pc[7]
  - r3.svalue=pc[7]
  - r4.svalue=pc[7]
  - r4.uvalue=pc[7]
  - meta_offset=[-oo, 0]
  - packet_size=[1, 65534]
  - pc[7]=[1, 255]
  - r0.type=number
  - r1.packet_offset=0
  - r1.svalue=[4098, 2147418112]
  - r1.type=packet
  - r2.type=number
  - r3.type=number
  - r4.type=number

---
test-case: simple infinite loop, less than
options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 0
    if r0 < 1 goto <start>
    exit

post: []

messages:
  - "1:2: Code becomes unreachable (assume r0 >= 1)"
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"
---
test-case: simple infinite loop, less than or equal
options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 0
    if r0 <= 1 goto <start>
    exit

post: []

messages:
  - "1:2: Code becomes unreachable (assume r0 > 1)"
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"

---
test-case: simple infinite loop, equal
options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 0
    if r0 == 0 goto <start>
    exit

post: []

messages:
  - "1:2: Code becomes unreachable (assume r0 != 0)"
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"

---
test-case: simple infinite loop, greater than
options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 1
    if r0 > 0 goto <start>
    exit

post: []

messages:
  - "1:2: Code becomes unreachable (assume r0 <= 0)"
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"

---
test-case: simple infinite loop, greater than or equal
options: ["termination"]

pre: []

code:
  <start>: |
    r0 = 1
    if r0 >= 0 goto <start>
    exit

post: []

messages:
  - "1:2: Code becomes unreachable (assume r0 < 0)"
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"
---
test-case: infinite loop with multiple exits
options: ["termination"]
pre: []
code:
  <start>: |
    r0 = 1
    if r0 > 0 goto <loop1>
    exit
  <loop1>: |
    if r0 < 2 goto <start>
    exit
post: []
messages:
  - "1:2: Code becomes unreachable (assume r0 <= 0)"
  - "3:4: Code becomes unreachable (assume r0 >= 2)"
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"

---
# Note: This test case terminates after 1000001 iterations, but the verifier assumes that the loop is infinite
# because it is greater than the default limit of 1000000 iterations.
test-case: very large loop > 1M iterations
options: ["termination"]
pre: [r0.type=number, r0.svalue=0, r0.uvalue=0]
code:
  <start>: |
    r0 += 1
    if r0 < 1000001 goto <start>
  <out>: |
    exit
post:
  - pc[0]=1000001
  - r0.uvalue=pc[0]
  - r0.svalue=pc[0]
  - r0.type=number
messages:
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"

---
test-case: possible infinite loop
options: ["termination"]

pre: [r0.type=number]
code:
  <start>: |
    if r0 > 0 goto <start>
    exit

post:
  - pc[0]=[1, +oo]
  - r0.svalue=0
  - r0.uvalue=0
  - r0.type=number

messages:
  - "0 (counter): Loop counter is too large (pc[0] < 100000)"

---
# Check for case where there are backwards jumps that don't form a loop.
test-case: non-loop backwards jump
options: ["termination"]

pre: [r0.type=number]
code:
  <start>: |
    r0 = 1
    goto <two>
  <one>: |
    r0 += 1
    exit
  <two>: |
    r0 += 1
    goto <one>

post:
  - r0.svalue=3
  - r0.uvalue=3
  - r0.type=number

messages: []

---
# Nested loops with inner infinite loop
test-case: nested loops with inner infinite loop
options: ["termination"]

pre:
  - "r0.type=number"
  - "r0.svalue=0"
  - "r0.uvalue=0"
code:
  <start>: |
    r0 += 1
    if r0 > 10 goto <out>
  <inner>: |
    if r0 > 0 goto <inner>
  <out>: |
    exit

post: []

messages:
  - "1:3: Code becomes unreachable (assume r0 > 10)"
  - "2:3: Code becomes unreachable (assume r0 <= 0)"
  - "2 (counter): Loop counter is too large (pc[2] < 100000)"
