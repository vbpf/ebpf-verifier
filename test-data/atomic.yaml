# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: atomic 32-bit ADD shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) += r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit ADD and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) += r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit ADD shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) += r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit ADD and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) += r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit AND shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) &= r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit AND and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) &= r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit AND shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) &= r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit AND and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) &= r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit OR shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) |= r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit OR and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) |= r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit OR shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) |= r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit OR and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) |= r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit XOR shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) ^= r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit XOR and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) ^= r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit XOR shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) ^= r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit XOR and fetch shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) ^= r1 fetch

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit XCHG shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) x= r1

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit XCHG shared

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) x= r1

post: ["r1.type=number",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit CMPXCHG shared

pre: ["r0.type=number", "r0.svalue=1", "r0.uvalue=1",
      "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) cx= r1

post: ["r0.type=number",
       "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=12", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 64-bit CMPXCHG shared

pre: ["r0.type=number", "r0.svalue=2", "r0.uvalue=2",
      "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) cx= r1

post: ["r0.type=number",
       "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]
---
test-case: atomic 32-bit ADD past end of shared region

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=shared", "r2.shared_region_size=10", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) += r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=shared", "r2.shared_region_size=10", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

messages:
  - "0: Upper bound must be at most r2.shared_region_size (valid_access(r2.offset+4, width=4) for write)"
---
test-case: atomic 32-bit ADD stack

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=1", "s[4...7].uvalue=1"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) += r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=3", "s[4...7].uvalue=3"]
---
test-case: atomic 32-bit ADD and fetch stack

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=1", "s[4...7].uvalue=1"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) += r1 fetch

post: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=3", "s[4...7].uvalue=3"]
---
test-case: atomic 64-bit ADD stack

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=1", "s[4...11].uvalue=1"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) += r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=3", "s[4...11].uvalue=3"]
---
test-case: atomic 64-bit ADD and fetch stack

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=1", "s[4...11].uvalue=1"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) += r1 fetch

post: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=3", "s[4...11].uvalue=3"]
---
test-case: atomic 32-bit AND stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=5", "s[4...7].uvalue=5"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) &= r1

post: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=1", "s[4...7].uvalue=1"]
---
test-case: atomic 32-bit AND and fetch stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=5", "s[4...7].uvalue=5"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) &= r1 fetch

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=1", "s[4...7].uvalue=1"]
---
test-case: atomic 64-bit AND stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=5", "s[4...11].uvalue=5"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) &= r1

post: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=1", "s[4...11].uvalue=1"]
---
test-case: atomic 64-bit AND and fetch stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=5", "s[4...11].uvalue=5"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) &= r1 fetch

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=1", "s[4...11].uvalue=1"]
---
test-case: atomic 32-bit OR stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=5", "s[4...7].uvalue=5"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) |= r1

post: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=7", "s[4...7].uvalue=7"]
---
test-case: atomic 32-bit OR and fetch stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=5", "s[4...7].uvalue=5"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) |= r1 fetch

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=7", "s[4...7].uvalue=7"]
---
test-case: atomic 64-bit OR stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=5", "s[4...11].uvalue=5"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) |= r1

post: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=7", "s[4...11].uvalue=7"]
---
test-case: atomic 64-bit OR and fetch stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=5", "s[4...11].uvalue=5"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) |= r1 fetch

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=7", "s[4...11].uvalue=7"]
---
test-case: atomic 32-bit XOR stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=5", "s[4...7].uvalue=5"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) ^= r1

post: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=6", "s[4...7].uvalue=6"]
---
test-case: atomic 32-bit XOR and fetch stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=5", "s[4...7].uvalue=5"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) ^= r1 fetch

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=6", "s[4...7].uvalue=6"]
---
test-case: atomic 64-bit XOR stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=5", "s[4...11].uvalue=5"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) ^= r1

post: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=6", "s[4...11].uvalue=6"]
---
test-case: atomic 64-bit XOR and fetch stack

pre: ["r1.type=number", "r1.svalue=3", "r1.uvalue=3",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=5", "s[4...11].uvalue=5"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) ^= r1 fetch

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=6", "s[4...11].uvalue=6"]
---
test-case: atomic 32-bit XCHG stack

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=5", "s[4...7].uvalue=5"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) x= r1

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number", "s[4...7].svalue=2", "s[4...7].uvalue=2"]
---
test-case: atomic 64-bit XCHG stack

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=5", "s[4...11].uvalue=5"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) x= r1

post: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number", "s[4...11].svalue=2", "s[4...11].uvalue=2"]
---
test-case: atomic 32-bit CMPXCHG stack

pre: ["r0.type=number", "r0.svalue=1", "r0.uvalue=1",
      "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...7].type=number", "s[4...7].svalue=1", "s[4...7].uvalue=1"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) cx= r1

post: ["r0.type=number", "r0.svalue=1", "r0.uvalue=1",
       "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...7].type=number"]
---
test-case: atomic 64-bit CMPXCHG stack

pre: ["r0.type=number", "r0.svalue=1", "r0.uvalue=1",
      "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number", "s[4...11].svalue=1", "s[4...11].uvalue=1"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) cx= r1

post: ["r0.type=number", "r0.svalue=1", "r0.uvalue=1",
       "r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=stack", "r2.stack_offset=0", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue",
       "r10.type=stack", "r10.stack_offset=512",
       "s[4...11].type=number"]
---
test-case: atomic 32-bit ADD to non-pointer space

pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=number", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u32 *)(r2 + 4) += r1

post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
       "r2.type=number", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

messages:
  - "0: Invalid type (r2.type in {ctx, stack, packet, shared})"
  - "0: Only pointers can be dereferenced (valid_access(r2.offset+4, width=4) for write)"
---
test-case: atomic 64-bit CMPXCHG comparing against non-number

pre: ["r0.type=number", "r0.svalue=2", "r0.uvalue=2",
      "r1.type=shared", "r1.shared_region_size=16", "r1.shared_offset=4",
      "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

code:
  <start>: |
    lock *(u64 *)(r2 + 4) cx= r1

post: ["r0.type=number", "r0.svalue=2", "r0.uvalue=2",
       "r1.type=shared", "r1.shared_region_size=16", "r1.shared_offset=4",
       "r2.type=shared", "r2.shared_region_size=16", "r2.shared_offset=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=r2.svalue"]

messages:
  - "0: Invalid type (r1.type == number)"
