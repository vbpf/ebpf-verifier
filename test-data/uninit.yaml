# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: addition of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 += r3

post:
  - "r0.type=uninit"

messages:
  - "0: Invalid type (r3.type in {number, ctx, stack, packet, shared})"

---
test-case: subtraction of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 -= r3

post: []

messages:
  - "0: Cannot subtract pointers to different regions (r3.type == number or r0.type == r3.type in {ctx, stack, packet})"

---
test-case: multiplication of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 *= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: division of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 /= r3

post:
  - "r0.svalue=[0, 1]"
  - "r0.uvalue=r0.svalue"
  - "r0.type=number"

messages:
  - "0: Only numbers can be used as divisors (r3 != 0)"

---
test-case: signed division of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 s/= r3

post:
  - "r0.svalue=[-1, 1]"
  - "r0.type=number"

messages:
  - "0: Only numbers can be used as divisors (r3 != 0)"

---
test-case: modulo of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 %= r3

post:
  - "r0.svalue=[0, 1]"
  - "r0.uvalue=r0.svalue"
  - "r0.type=number"

messages:
  - "0: Only numbers can be used as divisors (r3 != 0)"

---
test-case: signed modulo of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 s%= r3

post:
  - "r0.svalue=[0, 1]"
  - "r0.uvalue=r0.svalue"
  - "r0.type=number"

messages:
  - "0: Only numbers can be used as divisors (r3 != 0)"

---
test-case: AND of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 &= r3

post:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: OR of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 |= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: XOR of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 ^= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: LSH of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 <<= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: RSH of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 >>= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: ARSH of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 s>>= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: MOVSX8 of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 s8= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: MOVSX16 of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 s16= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: MOVSX32 of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 s32= r3

post:
  - "r0.type=number"

messages:
  - "0: Invalid type (r3.type == number)"

---
test-case: MOV of a number and an uninitialized register

pre:
  - "r0.type=number"
  - "r0.uvalue=1"
  - "r0.svalue=1"

code:
  <start>: |
    r0 = r3

post:
  - "r3.type=r0.type"
  - "r3.svalue=r0.svalue"
  - "r3.uvalue=r0.uvalue"

---
test-case: Store uninitialized register to context - 8 bytes

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    *(u64 *)(r1 + 0) = r0

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Only numbers can be stored to externally-visible regions (r1.type != stack -> r0.type == number)"

---
test-case: Store uninitialized register to context - 4 bytes

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    *(u32 *)(r1 + 0) = r0

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r0.type == number)"

---
test-case: Store uninitialized register to context - 2 bytes

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    *(u16 *)(r1 + 0) = r0

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r0.type == number)"

---
test-case: Store uninitialized register to context - 1 bytes

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    *(u8 *)(r1 + 0) = r0

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r0.type == number)"

---
test-case: Atomic add uninitialized register to context

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    lock *(u64 *)(r1 + 0) += r5

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r5.type == number)"

---
test-case: Atomic AND uninitialized register to context

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    lock *(u64 *)(r1 + 0) &= r5

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r5.type == number)"

---
test-case: Atomic OR uninitialized register to context

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    lock *(u64 *)(r1 + 0) |= r5

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r5.type == number)"

---
test-case: Atomic XOR uninitialized register to context

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    lock *(u64 *)(r1 + 0) |= r5

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r5.type == number)"

---
test-case: Atomic XHNG uninitialized register to context

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    lock *(u64 *)(r1 + 0) x= r5

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r5.type == number)"

---
test-case: Atomic CMPXCHG uninitialized register to context

pre:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

code:
  <start>: |
    lock *(u64 *)(r1 + 0) x= r5

post:
  - "r1.type=ctx"
  - "r1.ctx_offset=0"

messages:
  - "0: Invalid type (r5.type == number)"

# Issue: https://github.com/vbpf/ebpf-verifier/issues/754
# Should these tests fail?
---
test-case: Read uninitialized stack range - aligned

pre:
  - r10.type=stack
  - r10.stack_offset=512

code:
  <start>: |
    r0 = *(u64 *)(r10 - 16)

post:
  - "s[496...503].ctx_offset=r0.ctx_offset"
  - "s[496...503].map_fd=r0.map_fd"
  - "s[496...503].packet_offset=r0.packet_offset"
  - "s[496...503].shared_offset=r0.shared_offset"
  - "s[496...503].shared_region_size=r0.shared_region_size"
  - "s[496...503].stack_numeric_size=r0.stack_numeric_size"
  - "s[496...503].stack_offset=r0.stack_offset"
  - "s[496...503].svalue=r0.svalue"
  - "s[496...503].type=r0.type"
  - "s[496...503].uvalue=r0.uvalue"
  - "r10.stack_offset=512"
  - "r10.type=stack"

messages: []

---
test-case: Read uninitialized stack range - aligned

pre:
  - r10.type=stack
  - r10.stack_offset=512

code:
  <start>: |
    r0 = *(u64 *)(r10 - 8)

post:
  - "s[504...511].ctx_offset=r0.ctx_offset"
  - "s[504...511].map_fd=r0.map_fd"
  - "s[504...511].packet_offset=r0.packet_offset"
  - "s[504...511].shared_offset=r0.shared_offset"
  - "s[504...511].shared_region_size=r0.shared_region_size"
  - "s[504...511].stack_numeric_size=r0.stack_numeric_size"
  - "s[504...511].stack_offset=r0.stack_offset"
  - "s[504...511].svalue=r0.svalue"
  - "s[504...511].type=r0.type"
  - "s[504...511].uvalue=r0.uvalue"
  - "r10.stack_offset=512"
  - "r10.type=stack"

messages: []
---
test-case: Read uninitialized stack range - unaligned

pre:
  - r10.type=stack
  - r10.stack_offset=512

code:
  <start>: |
    r0 = *(u64 *)(r10 - 10)

post:
  - "s[502...509].ctx_offset=r0.ctx_offset"
  - "s[502...509].map_fd=r0.map_fd"
  - "s[502...509].packet_offset=r0.packet_offset"
  - "s[502...509].shared_offset=r0.shared_offset"
  - "s[502...509].shared_region_size=r0.shared_region_size"
  - "s[502...509].stack_numeric_size=r0.stack_numeric_size"
  - "s[502...509].stack_offset=r0.stack_offset"
  - "s[502...509].svalue=r0.svalue"
  - "s[502...509].type=r0.type"
  - "s[502...509].uvalue=r0.uvalue"
  - "r10.stack_offset=512"
  - "r10.type=stack"

messages: []
