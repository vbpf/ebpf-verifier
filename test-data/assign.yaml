# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: assign immediate

pre: []

code:
  <start>: |
    w1 = 0

post:
  - r1.type=number
  - r1.svalue=0
  - r1.uvalue=0
---
test-case: assign register

pre: []

code:
  <start>: |
    r1 = r2;

post:
  - r2.type=r1.type
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue

---
test-case: re-assign immediate

pre: ["r1.svalue=5", "r1.uvalue=5", "r1.type=number"]

code:
  <start>: |
    r1 = 0

post:
  - r1.type=number
  - r1.svalue=0
  - r1.uvalue=0
---
test-case: re-assign register

pre: ["r1.svalue=[-3, 5]", "r1.type=number"]

code:
  <start>: |
    r1 = 0

post:
  - r1.type=number
  - r1.svalue=0
  - r1.uvalue=0
---
test-case: stack assign immediate

pre: ["r10.type=stack", "r10.stack_offset=512"]

code:
  <start>: |
    *(u64 *)(r10 - 8) = 0

post:
  - r10.type=stack
  - r10.stack_offset=512
  - s[504...511].type=number
  - s[504...511].svalue=0
  - s[504...511].uvalue=0
---
test-case: stack assign number register

pre: ["r10.type=stack", "r10.stack_offset=512", "r1.type=number", "r1.svalue=0", "r1.uvalue=0"]

code:
  <start>: |
    *(u64 *)(r10 - 8) = r1

post:
  - r1.type=number
  - r1.svalue=0
  - r1.uvalue=0
  - r10.type=stack
  - r10.stack_offset=512
  - s[504...511].type=number
  - s[504...511].svalue=0
  - s[504...511].uvalue=0
---
test-case: stack assign packet register

pre: ["r10.type=stack", "r10.stack_offset=512", "r1.type=packet", "r1.packet_offset=0"]

code:
  <start>: |
    *(u64 *)(r10 - 8) = r1

post:
  - r1.type=packet
  - r1.packet_offset=0
  - s[504...511].svalue=r1.svalue
  - s[504...511].uvalue=r1.uvalue
  - r10.type=stack
  - r10.stack_offset=512
  - s[504...511].type=packet
  - s[504...511].packet_offset=0
---
test-case: stack extend numeric range

pre: ["r10.type=stack", "r10.stack_offset=512", "s[500...507].type=number"]

code:
  <start>: |
    *(u64 *)(r10 - 8) = 0

post:
  - r10.type=stack
  - r10.stack_offset=512
  - s[500...511].type=number
  - s[504...511].svalue=0
  - s[504...511].uvalue=0
---
test-case: stack narrow numeric range

pre: ["r10.type=stack", "r10.stack_offset=512", "r1.type=packet", "r1.packet_offset=0", "s[500...507].type=number"]

code:
  <start>: |
    *(u64 *)(r10 - 8) = r1

post:
  - r1.type=packet
  - r1.packet_offset=0
  - s[504...511].svalue=r1.svalue
  - s[504...511].uvalue=r1.uvalue
  - r10.type=stack
  - r10.stack_offset=512
  - s[500...503].type=number
  - s[504...511].type=packet
  - s[504...511].packet_offset=0
---
test-case: assign register number value

pre: ["r1.svalue=0", "r1.uvalue=0", "r1.type=number"]

code:
  <start>: |
    r2 = r1

post:
  - r1.type=number
  - r1.svalue=0
  - r1.uvalue=0
  - r2.type=number
  - r2.svalue=0
  - r2.uvalue=0
---
test-case: assign register stack value

pre: ["r1.type=stack", "r1.stack_offset=0"]

code:
  <start>: |
    r2 = r1

post:
  - r1.type=stack
  - r1.stack_offset=0
  - r2.type=stack
  - r2.stack_offset=0
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue
  - r2.stack_numeric_size=r1.stack_numeric_size
---
test-case: 32-bit assign register stack value

pre: ["r10.type=stack", "r10.stack_offset=512"]

code:
  <start>: |
    w2 = r10

post:
  - r2.svalue=[0, 4294967295]
  - r2.uvalue=r2.svalue
  - r10.type=stack
  - r10.stack_offset=512

messages:
  - "0: Invalid type (r10.type == number)"
---
test-case: assign register shared value

pre: ["r1.type=shared", "r1.shared_offset=0", "r1.shared_region_size=16"]

code:
  <start>: |
    r2 = r1

post:
  - r1.type=shared
  - r1.shared_offset=0
  - r1.shared_region_size=16
  - r2.type=shared
  - r2.shared_offset=0
  - r2.shared_region_size=16
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue
---
test-case: 32-bit assign register shared value

pre: ["r1.type=shared", "r1.shared_offset=0", "r1.shared_region_size=16"]

code:
  <start>: |
    w2 = r1

post:
  - r1.type=shared
  - r1.shared_offset=0
  - r1.shared_region_size=16
  - r2.svalue=[0, 4294967295]
  - r2.uvalue=r2.svalue

messages:
  - "0: Invalid type (r1.type == number)"
---
test-case: assign register combination value

pre: ["r1.type=[-1,0]", "r1.shared_offset=0", "r1.shared_region_size=16", "r1.stack_offset=500", "r1.stack_numeric_size=16"]

code:
  <start>: |
    r2 = r1

post:
  - r1.type in {stack, shared}
  - r1.shared_offset=0
  - r1.shared_region_size=16
  - r1.stack_offset=500
  - r1.stack_numeric_size=16
  - r2.shared_offset=0
  - r2.shared_region_size=16
  - r2.stack_offset=500
  - r2.stack_numeric_size=16
  - r2.type=r1.type
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue
---
test-case: 32-bit indirect assignment from context

pre: ["r1.ctx_offset=0", "r1.type=ctx", "r1.svalue=[1, 2147418112]", "r1.uvalue=[1, 2147418112]"]

code:
  <start>: |
    r2 = *(u32 *)(r1 + 4)

post:
  - r2.packet_offset=packet_size
  - r1.ctx_offset=0
  - r1.type=ctx
  - r1.svalue=[1, 2147418112]
  - r1.uvalue=[1, 2147418112]
  - r2.type=packet
  - r2.svalue=[4098, 2147418112]
---
test-case: 16-bit indirect assignment from context

pre: ["r1.ctx_offset=0", "r1.type=ctx", "r1.svalue=[1, 2147418112]", "r1.uvalue=[1, 2147418112]"]

code:
  <start>: |
    r2 = *(u16 *)(r1 + 4)

post:
  - r1.ctx_offset=0
  - r1.type=ctx
  - r1.svalue=[1, 2147418112]
  - r1.uvalue=[1, 2147418112]
---
test-case: 64-bit indirect assignment from context

pre: ["r1.ctx_offset=0", "r1.type=ctx", "r1.svalue=[1, 2147418112]", "r1.uvalue=[1, 2147418112]"]

code:
  <start>: |
    r2 = *(u64 *)(r1 + 4)

post:
  - r1.ctx_offset=0
  - r1.type=ctx
  - r1.svalue=[1, 2147418112]
  - r1.uvalue=[1, 2147418112]
---
test-case: assign register packet value

pre: ["r2.packet_offset=packet_size", "r2.type=packet", "r2.svalue=[4098, 2147418112]"]

code:
  <start>: |
    r1 = r2

post:
  - r1.packet_offset=packet_size
  - r2.packet_offset=packet_size
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue
  - r1.type=packet
  - r1.svalue=[4098, 2147418112]
  - r2.type=packet
---
test-case: 32-bit assign register packet value

pre: ["r2.packet_offset=packet_size", "r2.type=packet", "r2.svalue=[4098, 2147418112]"]

code:
  <start>: |
    w1 = r2

post:
  - r1.svalue=[0, 4294967295]
  - r1.uvalue=r1.svalue
  - r2.packet_offset=packet_size
  - r2.type=packet
  - r2.svalue=[4098, 2147418112]

messages:
  - "0: Invalid type (r2.type == number)"
---
test-case: assign register context value

pre: ["r1.ctx_offset=0", "r1.type=ctx", "r1.svalue=[1, 2147418112]", "r1.uvalue=[1, 2147418112]"]

code:
  <start>: |
    r2 = r1

post:
  - r1.ctx_offset=0
  - r1.type=ctx
  - r1.svalue=[1, 2147418112]
  - r1.uvalue=[1, 2147418112]
  - r2.ctx_offset=0
  - r2.type=ctx
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue
---
test-case: 32-bit assign register context value

pre: ["r1.ctx_offset=0", "r1.type=ctx", "r1.svalue=[1, 2147418112]", "r1.uvalue=[1, 2147418112]"]

code:
  <start>: |
    w2 = r1

post:
  - r1.ctx_offset=0
  - r1.type=ctx
  - r1.svalue=[1, 2147418112]
  - r1.uvalue=[1, 2147418112]
  - r2.svalue=[1, 2147418112]
  - r2.uvalue=r2.svalue

messages:
  - "0: Invalid type (r1.type == number)"
---
test-case: assign register map value

pre: ["r1.type=map_fd", "r1.map_fd=1"]

code:
  <start>: |
    r2 = r1

post:
  - r1.map_fd=1
  - r1.type=map_fd
  - r2.map_fd=1
  - r2.type=map_fd
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue
---
test-case: 32-bit assign register map value

pre: ["r1.type=map_fd", "r1.map_fd=1"]

code:
  <start>: |
    w2 = r1

post:
  - r1.map_fd=1
  - r1.type=map_fd
  - r2.svalue=[0, 4294967295]
  - r2.uvalue=r2.svalue

messages:
  - "0: Invalid type (r1.type == number)"
---
test-case: assign register map programs value

pre: ["r1.type=map_fd_programs", "r1.map_fd=1"]

code:
  <start>: |
    r2 = r1

post:
  - r1.map_fd=1
  - r1.type=map_fd_programs
  - r2.map_fd=1
  - r2.type=map_fd_programs
  - r2.svalue=r1.svalue
  - r2.uvalue=r1.uvalue
---
test-case: 32-bit assign register map programs value

pre: ["r1.type=map_fd_programs", "r1.map_fd=1"]

code:
  <start>: |
    w2 = r1

post:
  - r1.map_fd=1
  - r1.type=map_fd_programs
  - r2.svalue=[0, 4294967295]
  - r2.uvalue=r2.svalue

messages:
  - "0: Invalid type (r1.type == number)"
