# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: "assume 0 < 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=0", "r1.uvalue=0"]
code:
  <start>: assume r1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 0 w< 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=0", "r1.uvalue=0"]
code:
  <start>: assume w1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 < 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
code:
  <start>: assume r1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 w< 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
code:
  <start>: assume w1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
code:
  <start>: assume r1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 w< 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
code:
  <start>: assume w1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 < 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
code:
  <start>: assume r1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 w< 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
code:
  <start>: assume w1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
code:
  <start>: assume r1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 w< 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
code:
  <start>: assume w1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 2 < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2"]
code:
  <start>: assume r1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 2 w< 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2"]
code:
  <start>: assume w1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [0, 1] < 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: assume r1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [0, 1] w< 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: assume w1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [2, 3] < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[2, 3]", "r1.uvalue=[2, 3]", "r1.svalue=r1.uvalue"]
code:
  <start>: assume r1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [2, 3] w< 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[2, 3]", "r1.uvalue=[2, 3]", "r1.svalue=r1.uvalue"]
code:
  <start>: assume w1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-2, -1] < 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]"]
code:
  <start>: assume r1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-2, -1] w< 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]"]
code:
  <start>: assume w1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] < -3 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]"]
code:
  <start>: assume r1 < -3
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] w< -3 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]"]
code:
  <start>: assume w1 < -3
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] < -4 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]"]
code:
  <start>: assume r1 < -4
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] w< -4 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]"]
code:
  <start>: assume w1 < -4
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 < [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 w< [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 < [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 w< [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 < [1, 2] implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615",
      "r2.type=number", "r2.svalue=[1, 2]", "r2.uvalue=[1, 2]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume -1 w< [1, 2] implies bottom"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615",
      "r2.type=number", "r2.svalue=[1, 2]", "r2.uvalue=[1, 2]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 2 < [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 2 w< [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 < [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 1 w< [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 2 < [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume 2 w< [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [2, 3] < [1, 2] implies bottom"
pre: ["r1.type=number", "r1.svalue=[2, 3]", "r1.uvalue=[2, 3]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[1, 2]", "r2.uvalue=[1, 2]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [2, 3] w< [1, 2] implies bottom"
pre: ["r1.type=number", "r1.svalue=[2, 3]", "r1.uvalue=[2, 3]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[1, 2]", "r2.uvalue=[1, 2]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-2, -1] < [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-2, -1] w< [0, 1] implies bottom"
pre: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[0, 1]", "r2.uvalue=[0, 1]", "r2.svalue=r2.uvalue"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] < [-4, -3] implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]",
      "r2.type=number", "r2.svalue=[-4, -3]", "r2.uvalue=[18446744073709551612, 18446744073709551613]"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] w< [-4, -3] implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]",
      "r2.type=number", "r2.svalue=[-4, -3]", "r2.uvalue=[18446744073709551612, 18446744073709551613]"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] < [-5, -4] implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]",
      "r2.type=number", "r2.svalue=[-5, -4]", "r2.uvalue=[18446744073709551611, 18446744073709551612]"]
code:
  <start>: assume r1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [-3, -2] w< [-5, -4] implies bottom"
pre: ["r1.type=number", "r1.svalue=[-3, -2]", "r1.uvalue=[18446744073709551613, 18446744073709551614]",
      "r2.type=number", "r2.svalue=[-5, -4]", "r2.uvalue=[18446744073709551611, 18446744073709551612]"]
code:
  <start>: assume w1 < r2
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume INT_MIN+1 < 0 implies bottom"
pre: []
code:
  <start>:  |
    r1 = -9223372036854775807ll
    assume r1 < 0
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume INT_MIN+1 w< 0 implies bottom"
pre: []
code:
  <start>:  |
    r1 = -9223372036854775807ll
    assume w1 < 0
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume INT_MIN+1 w< 2 nop"
pre: []
code:
  <start>:  |
    r1 = -9223372036854775807ll
    assume w1 < 2
post: ["r1.type=number", "r1.svalue=-9223372036854775807", "r1.uvalue=9223372036854775809"]
---
test-case: "assume [INT_MIN+1, -1] < 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]"]
code:
  <start>: assume r1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [INT32_MIN, -1] w< 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]"]
code:
  <start>:  |
    assume w1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume something w< 0 implies bottom"
pre: ["r1.type=number", "r1.svalue=-4294967298", "r1.uvalue=18446744069414584318"]
code:
  <start>:  |
    assume w1 < 0
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume INT_MIN+1 < 1 implies bottom"
pre: []
code:
  <start>: |
    r1 = -9223372036854775807ll
    assume r1 < 1
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume INT32_MIN w< 1 implies bottom"
pre: []
code:
  <start>: |
    r1 = -2147483648
    assume w1 < 1
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume INT_MIN+1 < INT_MIN+1 implies bottom"
pre: []
code:
  <start>: |
    r1 = -9223372036854775807ll
    r2 = -9223372036854775807ll
    assume r1 < r2
post: []
messages:
  - "2: Code is unreachable after 2"
---
test-case: "assume INT32_MIN w< INT32_MIN implies bottom"
pre: []
code:
  <start>: |
    r1 = -2147483648
    r2 = -2147483648
    assume w1 < r2
post: []
messages:
  - "2: Code is unreachable after 2"
---
test-case: "assume INT_MIN+2 < INT_MIN+1 implies bottom"
pre: []
code:
  <start>: |
    r1 = -9223372036854775806ll
    r2 = -9223372036854775807ll
    assume r1 < r2
post: []
messages:
  - "2: Code is unreachable after 2"
---
test-case: "assume -1 < INT_MIN+1 implies bottom"
pre: []
code:
  <start>: |
    r1 = -1
    r2 = -9223372036854775807ll
    assume r1 < r2
post: []
messages:
  - "2: Code is unreachable after 2"
---
test-case: "assume -1 w< INT32_MIN implies bottom"
pre: []
code:
  <start>: |
    r1 = -1
    r2 = -2147483648
    assume w1 < r2
post: []
messages:
  - "2: Code is unreachable after 2"
---
test-case: "assume INT32_MIN w< INT32_MAX implies bottom"
pre: []
code:
  <start>: |
    r1 = -2147483648
    r2 = 2147483647
    assume w1 < r2
post: []
messages:
  - "2: Code is unreachable after 2"
---
test-case: "assume [1, INT_MAX] < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775806]", "r1.uvalue=[0, 9223372036854775806]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    r1 += 1
    assume r1 < 1
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume [1, INT32_MAX] w< 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[1, 2147483647]", "r1.uvalue=[1, 2147483647]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [INT_MAX-1, INT_MAX] < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[9223372036854775803, 9223372036854775804]", "r1.uvalue=[9223372036854775803, 9223372036854775804]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    r1 += 3
    assume r1 < 1
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume [INT32_MAX-1, INT32_MAX] < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[2147483646, 2147483647]", "r1.uvalue=[2147483646, 2147483647]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 < 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [INT_MAX, INT_MAX+1] < 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[9223372036854775803, 9223372036854775804]", "r1.uvalue=[9223372036854775803, 9223372036854775804]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    r1 += 4
    assume r1 < 1
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume 0 < 1 nop"
pre: []
code:
  <start>: |
    r1 = 0
    assume r1 < 1
post: ["r1.type=number", "r1.svalue=0", "r1.uvalue=0"]
---
test-case: "assume 0 w< 1 nop"
pre: []
code:
  <start>: |
    r1 = 0
    assume w1 < 1
post: ["r1.type=number", "r1.svalue=0", "r1.uvalue=0"]
---
test-case: "assume [0, 1] < 2 nop"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume r1 < 2
post: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
---
test-case: "assume [0, 1] w< 2 nop"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 < 2
post: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
---
test-case: "assume [0, 1] < 1 narrows to 0"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume r1 < 1
post: ["r1.type=number", "r1.svalue=0", "r1.uvalue=0", "r1.svalue=r1.uvalue"]
---
test-case: "assume [0, 1] w< 1 narrows to 0"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 < 1
post: ["r1.type=number", "r1.svalue=0", "r1.uvalue=0", "r1.svalue=r1.uvalue"]
---
test-case: "assume [0, 1] > 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume r1 > 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [0, 1] w> 1 implies bottom"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 > 1
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [1, 2] > 1 narrows to 2"
pre: ["r1.type=number", "r1.svalue=[1, 2]", "r1.uvalue=[1, 2]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2", "r1.svalue=r1.uvalue"]
---
test-case: "assume [1, 2] w> 1 narrows to 2"
pre: ["r1.type=number", "r1.svalue=[1, 2]", "r1.uvalue=[1, 2]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 > 1
post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2", "r1.svalue=r1.uvalue"]
---
test-case: "assume [1, 3] > 1 narrows to [2, 3]"
pre: ["r1.type=number", "r1.svalue=[1, 3]", "r1.uvalue=[1, 3]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=[2, 3]", "r1.uvalue=[2, 3]", "r1.svalue=r1.uvalue"]
---
test-case: "assume [1, 3] w> 1 narrows to [2, 3]"
pre: ["r1.type=number", "r1.svalue=[1, 3]", "r1.uvalue=[1, 3]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 > 1
post: ["r1.type=number", "r1.svalue=[2, 3]", "r1.uvalue=[2, 3]", "r1.svalue=r1.uvalue"]
---
test-case: "assume 1 > 0 nop"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
code:
  <start>: |
    assume r1 > 0
post: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
---
test-case: "assume 1 w> 0 nop"
pre: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
code:
  <start>: |
    assume w1 > 0
post: ["r1.type=number", "r1.svalue=1", "r1.uvalue=1"]
---
test-case: "assume [1, INT_MAX] > 0 nop"
pre: ["r1.type=number", "r1.svalue=[1, 9223372036854775807]", "r1.uvalue=[1, 9223372036854775807]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume r1 > 0
post: ["r1.type=number", "r1.svalue=[1, 9223372036854775807]", "r1.uvalue=[1, 9223372036854775807]", "r1.svalue=r1.uvalue"]
---
test-case: "assume [1, INT32_MAX] w> 0 nop"
pre: ["r1.type=number", "r1.svalue=[1, 2147483646]", "r1.uvalue=[1, 2147483646]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 > 0
post: ["r1.type=number", "r1.svalue=[1, 2147483646]", "r1.uvalue=[1, 2147483646]", "r1.svalue=r1.uvalue"]
---
test-case: "assume [0, INT_MAX] > 1 narrows to [2, INT_MAX]"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=[2, 9223372036854775807]", "r1.uvalue=[2, 9223372036854775807]", "r1.svalue=r1.uvalue"]
---
test-case: "assume [0, INT32_MAX] w> 1 narrows to [2, INT32_MAX]"
pre: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 > 1
post: ["r1.type=number", "r1.svalue=[2, 2147483647]", "r1.uvalue=[2, 2147483647]", "r1.svalue=r1.uvalue"]
---
test-case: "assume [0, INT_MAX] > INT_MAX implies bottom"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    r2 = 9223372036854775807ll
    assume r1 > r2
post: []
messages:
  - "1: Code is unreachable after 1"
---
test-case: "assume [0, INT32_MAX] w> INT32_MAX implies bottom"
pre: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    assume w1 > 2147483647
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [0, INT_MAX-4] >= INT_MAX-4 narrows to INT_MAX-4"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775803]", "r1.uvalue=[0, 9223372036854775803]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    r2 = 9223372036854775803ll
    assume r1 >= r2
post: ["r1.type=number", "r1.svalue=9223372036854775803", "r1.uvalue=9223372036854775803", "r1.svalue=r1.uvalue",
        "r2.type=number", "r2.svalue=9223372036854775803", "r2.uvalue=9223372036854775803",
        "r2.uvalue-r1.svalue<=0",  # missing: r1.svalue-r2.uvalue<=0; probably avoiding overflow in SplitDBM
        "r2.svalue-r1.svalue<=0",  # missing: r1.svalue-r2.svalue<=0; probably avoiding overflow in SplitDBM
        "r2.svalue-r1.uvalue<=0",  # missing: r1.uvalue-r2.svalue<=0; probably avoiding overflow in SplitDBM
        "r2.uvalue-r1.uvalue<=0"]  # missing: r1.uvalue-r2.uvalue<=0; probably avoiding overflow in SplitDBM
---
test-case: "assume [0, INT32_MAX] w>= INT32_MAX narrows to INT32_MAX"
pre: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue"]
code:
  <start>: |
    r2 = 2147483647
    assume w1 >= r2
post: ["r1.type=number", "r1.svalue=2147483647", "r1.uvalue=2147483647", "r1.svalue=r1.uvalue",
        "r2.type=number", "r2.svalue=2147483647", "r2.uvalue=2147483647",
        "r2.uvalue-r1.svalue<=0",  # missing: r1.svalue-r2.uvalue<=0; probably avoiding overflow in SplitDBM
        "r2.svalue-r1.svalue<=0",  # missing: r1.svalue-r2.svalue<=0; probably avoiding overflow in SplitDBM
        "r2.svalue-r1.uvalue<=0",  # missing: r1.uvalue-r2.svalue<=0; probably avoiding overflow in SplitDBM
        "r2.uvalue-r1.uvalue<=0"]  # missing: r1.uvalue-r2.uvalue<=0; probably avoiding overflow in SplitDBM
---
test-case: "assume 4294967301 w>= 5 nop"
pre: ["r1.type=number", "r1.svalue=4294967301", "r1.uvalue=4294967301"]
code:
  <start>: assume w1 >= 5
post: ["r1.type=number", "r1.svalue=4294967301", "r1.uvalue=4294967301"]
---
test-case: "assume [-1, 1] > 0 nop"
pre: ["r1.type=number", "r1.svalue=[-1, 1]"]
code:
  <start>: |
    assume r1 > 0
post: ["r1.type=number", "r1.svalue=[-1, 1]", "r1.uvalue=[1, 18446744073709551615]"]
---
test-case: "assume [-1, 1] w> 0 nop"
pre: ["r1.type=number", "r1.svalue=[-1, 1]"]
code:
  <start>: |
    assume w1 > 0
post: ["r1.type=number", "r1.svalue=[-1, 1]"]
---
test-case: "assume [-1, 1] > 1 narrows"
pre: ["r1.type=number", "r1.svalue=[-1, 1]"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
---
test-case: "assume [-1, 1] > [1, 2] narrows"
pre: ["r1.type=number", "r1.svalue=[-1, 1]",
      "r2.type=number", "r2.svalue=[1, 2]", "r2.uvalue=[1, 2]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume r1 > r2
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615",
       "r2.type=number", "r2.svalue=[1, 2]", "r2.uvalue=[1, 2]", "r2.svalue=r2.uvalue",
       "r2.svalue-r1.uvalue<=-1", "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [-1, 1] >= 2 narrows"
pre: ["r1.type=number", "r1.svalue=[-1, 1]"]
code:
  <start>: |
    assume r1 >= 2
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
---
test-case: "assume [-1, 1] >= [2, 3] narrows"
pre: ["r1.type=number", "r1.svalue=[-1, 1]",
      "r2.type=number", "r2.svalue=[2, 3]", "r2.uvalue=[2, 3]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume r1 > r2
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615",
       "r2.type=number", "r2.svalue=[2, 3]", "r2.uvalue=[2, 3]", "r2.svalue=r2.uvalue",
       "r2.svalue-r1.uvalue<=-1", "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [-1, 1] < -1 narrows"
pre: ["r1.type=number", "r1.svalue=[-1, 1]"]
code:
  <start>: |
    assume r1 < -1
post: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]"]
---
test-case: "assume [-1, 1] <= -2 narrows"
pre: ["r1.type=number", "r1.svalue=[-1, 1]"]
code:
  <start>: |
    assume r1 <= -2
post: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]"]
---
test-case: "assume [-1, 2] > 1 narrows uvalue"
pre: ["r1.type=number", "r1.svalue=[-1, 2]"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=[-1, 2]", "r1.uvalue=[2, 18446744073709551615]"]
---
test-case: "assume [-1, 2] >= 2 narrows uvalue"
pre: ["r1.type=number", "r1.svalue=[-1, 2]"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=[-1, 2]", "r1.uvalue=[2, 18446744073709551615]"]
---
test-case: "assume [-1, 1] w> 1 nop"
pre: ["r1.type=number", "r1.svalue=[-1, 1]"]
code:
  <start>: |
    assume w1 > 1
post: ["r1.type=number", "r1.svalue=[-1, 1]"]
---
test-case: "assume TOP > 1 narrows uvalue"
pre: ["r1.type=number"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.uvalue=[2, 18446744073709551615]"]
---
test-case: "assume TOP w> 1 nop"
pre: ["r1.type=number"]
code:
  <start>: |
    assume w1 > 1
post: ["r1.type=number"]
---
test-case: "assume -1 > 1 nop"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
---
test-case: "assume -1 w> 1 nop"
pre: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
code:
  <start>: |
    assume w1 > 1
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
---
test-case: "assume [-2, -1] > 1 nop"
pre: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]"]
code:
  <start>: |
    assume r1 > 1
post: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]"]
---
test-case: "assume [-2, -1] w> 1 nop"
pre: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]"]
code:
  <start>: |
    assume w1 > 1
post: ["r1.type=number", "r1.svalue=[-2, -1]", "r1.uvalue=[18446744073709551614, 18446744073709551615]"]
---
test-case: "assume -1 > INT_MAX nop"
pre: []
code:
  <start>: |
    r1 = -1
    r2 = 9223372036854775807ll
    assume r1 > r2
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615",
       "r2.type=number", "r2.svalue=9223372036854775807", "r2.uvalue=9223372036854775807", "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume -1 w> INT32_MAX nop"
pre: []
code:
  <start>: |
    r1 = -1
    assume w1 > 2147483647
post: ["r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]
---
test-case: "assume [INT_MIN+1, -1] > INT_MAX nop"
pre: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]"]
code:
  <start>: |
    r2 = 9223372036854775807ll
    assume r1 > r2
post: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]",
       "r2.type=number", "r2.svalue=9223372036854775807", "r2.uvalue=9223372036854775807", "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [INT32_MIN, -1] w> INT32_MAX nop"
pre: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]"]
code:
  <start>: |
    assume w1 > 2147483647
post: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]"]
---
test-case: "assume [INT_MIN+1, -1] > [0, INT_MAX] nop"
pre: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.uvalue=[0, 9223372036854775807]"]
code:
  <start>: |
    assume r1 > r2
post: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]",
       "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.uvalue=[0, 9223372036854775807]", "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [INT32_MIN, -1] w> [0, INT32_MAX] nop"
pre: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]"]
code:
  <start>: |
    assume w1 > r2
post: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]",
       "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]"]
---
test-case: "assume [0, INT_MAX] <= [0, INT_MAX] implies relation"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.svalue=[0, 9223372036854775807]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume r1 <= r2
post: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.uvalue=[0, 9223372036854775807]", "r2.svalue=r2.uvalue",
       "r1.svalue-r2.svalue<=0", "r1.svalue-r2.uvalue<=0",
       "r1.uvalue-r2.svalue<=0", "r1.uvalue-r2.uvalue<=0"]
---
test-case: "assume [0, INT32_MAX] w<= [0, INT32_MAX] implies relation"
pre: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume w1 <= r2
post: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]", "r2.svalue=r2.uvalue",
       "r1.svalue-r2.svalue<=0", "r1.svalue-r2.uvalue<=0",
       "r1.uvalue-r2.svalue<=0", "r1.uvalue-r2.uvalue<=0"]
---
test-case: "assume [0, INT_MAX] >= [0, INT_MAX] implies relation"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.uvalue=[0, 9223372036854775807]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume r1 >= r2
post: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.uvalue=[0, 9223372036854775807]", "r2.svalue=r2.uvalue",
       "r2.svalue-r1.svalue<=0", "r2.svalue-r1.uvalue<=0",
       "r2.uvalue-r1.svalue<=0", "r2.uvalue-r1.uvalue<=0"]
---
test-case: "assume [0, INT32_MAX] w>= [0, INT32_MAX] implies relation"
pre: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume w1 >= r2
post: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]", "r2.svalue=r2.uvalue",
       "r2.svalue-r1.svalue<=0", "r2.svalue-r1.uvalue<=0",
       "r2.uvalue-r1.svalue<=0", "r2.uvalue-r1.uvalue<=0"]
---
test-case: "assume [INT_MIN, -1] >= [INT_MIN, -1] implies relation"
pre: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[-9223372036854775807, -1]", "r2.uvalue=[9223372036854775809, 18446744073709551615]"]
code:
  <start>: |
    assume r1 >= r2
post: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]",
       "r2.type=number", "r2.svalue=[-9223372036854775807, -1]", "r2.uvalue=[9223372036854775809, 18446744073709551615]",
       "r2.svalue-r1.svalue<=0",
       "r2.uvalue-r1.uvalue<=0"]
---
test-case: "assume [INT32_MIN, -1] w>= [INT32_MIN, -1] implies relation"
pre: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[-2147483648, -1]", "r2.uvalue=[18446744071562067968, 18446744073709551615]"]
code:
  <start>: |
    assume w1 >= r2
post: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]",
       "r2.type=number", "r2.svalue=[-2147483648, -1]", "r2.uvalue=[18446744071562067968, 18446744073709551615]",
       "r2.svalue-r1.svalue<=0",
       "r2.uvalue-r1.uvalue<=0"]
---
test-case: "assume [0, INT_MAX] < [0, INT_MAX] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.uvalue=[0, 9223372036854775807]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume r1 < r2
post: ["r1.type=number", "r1.svalue=[0, 9223372036854775806]", "r1.uvalue=[0, 9223372036854775806]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[1, 9223372036854775807]", "r2.uvalue=[1, 9223372036854775807]", "r2.svalue=r2.uvalue",
       "r1.svalue-r2.svalue<=-1", "r1.svalue-r2.uvalue<=-1",
       "r1.uvalue-r2.svalue<=-1", "r1.uvalue-r2.uvalue<=-1"]
---
test-case: "assume [0, INT32_MAX] w< [0, INT32_MAX] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume w1 < r2
post: ["r1.type=number", "r1.svalue=[0, 2147483646]", "r1.uvalue=[0, 2147483646]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[1, 2147483647]", "r2.uvalue=[1, 2147483647]", "r2.svalue=r2.uvalue",
       "r1.svalue-r2.svalue<=-1", "r1.svalue-r2.uvalue<=-1",
       "r1.uvalue-r2.svalue<=-1", "r1.uvalue-r2.uvalue<=-1"]
---
test-case: "assume [INT_MIN+1, -1] < [INT_MIN+1, -1] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[-9223372036854775807, -1]", "r2.uvalue=[9223372036854775809, 18446744073709551615]"]
code:
  <start>: |
    assume r1 < r2
post: ["r1.type=number", "r1.svalue=[-9223372036854775807, -2]", "r1.uvalue=[9223372036854775809, 18446744073709551614]",
       "r2.type=number", "r2.svalue=[-9223372036854775806, -1]", "r2.uvalue=[9223372036854775810, 18446744073709551615]",
       "r1.svalue-r2.svalue<=-1",
       "r1.uvalue-r2.uvalue<=-1"]
---
test-case: "assume [INT32_MIN, -1] w< [INT_MIN32, -1] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[-2147483648, -1]", "r2.uvalue=[18446744071562067968, 18446744073709551615]"]
code:
  <start>: |
    assume w1 < r2
post: ["r1.type=number", "r1.svalue=[-2147483648, -2]", "r1.uvalue=[18446744071562067968, 18446744073709551614]",
       "r2.type=number", "r2.svalue=[-2147483647, -1]", "r2.uvalue=[18446744071562067969, 18446744073709551615]",
       "r1.svalue-r2.svalue<=-1",
       "r1.uvalue-r2.uvalue<=-1"]
---
test-case: "assume [0, INT_MAX] > [0, INT_MAX] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[0, 9223372036854775807]", "r1.uvalue=[0, 9223372036854775807]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 9223372036854775807]", "r2.uvalue=[0, 9223372036854775807]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume r1 > r2
post: ["r1.type=number", "r1.svalue=[1, 9223372036854775807]", "r1.uvalue=[1, 9223372036854775807]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[0, 9223372036854775806]", "r2.uvalue=[0, 9223372036854775806]", "r2.svalue=r2.uvalue",
       "r2.svalue-r1.svalue<=-1", "r2.svalue-r1.uvalue<=-1",
       "r2.uvalue-r1.svalue<=-1", "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [0, INT32_MAX] w> [0, INT32_MAX] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[0, 2147483647]", "r1.uvalue=[0, 2147483647]", "r1.svalue=r1.uvalue",
      "r2.type=number", "r2.svalue=[0, 2147483647]", "r2.uvalue=[0, 2147483647]", "r2.svalue=r2.uvalue"]
code:
  <start>: |
    assume w1 > r2
post: ["r1.type=number", "r1.svalue=[1, 2147483647]", "r1.uvalue=[1, 2147483647]", "r1.svalue=r1.uvalue",
       "r2.type=number", "r2.svalue=[0, 2147483646]", "r2.uvalue=[0, 2147483646]", "r2.svalue=r2.uvalue",
       "r2.svalue-r1.svalue<=-1", "r2.svalue-r1.uvalue<=-1",
       "r2.uvalue-r1.svalue<=-1", "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [INT_MIN+1, -1] > [INT_MIN+1, -1] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[-9223372036854775807, -1]", "r1.uvalue=[9223372036854775809, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[-9223372036854775807, -1]", "r2.uvalue=[9223372036854775809, 18446744073709551615]"]
code:
  <start>: |
    assume r1 > r2
post: ["r1.type=number", "r1.svalue=[-9223372036854775806, -1]", "r1.uvalue=[9223372036854775810, 18446744073709551615]",
       "r2.type=number", "r2.svalue=[-9223372036854775807, -2]", "r2.uvalue=[9223372036854775809, 18446744073709551614]",
       "r2.svalue-r1.svalue<=-1",
       "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [INT32_MIN, -1] w> [INT32_MIN, -1] implies narrowing and relation"
pre: ["r1.type=number", "r1.svalue=[-2147483648, -1]", "r1.uvalue=[18446744071562067968, 18446744073709551615]",
      "r2.type=number", "r2.svalue=[-2147483648, -1]", "r2.uvalue=[18446744071562067968, 18446744073709551615]"]
code:
  <start>: |
    assume w1 > r2
post: ["r1.type=number", "r1.svalue=[-2147483647, -1]", "r1.uvalue=[18446744071562067969, 18446744073709551615]",
       "r2.type=number", "r2.svalue=[-2147483648, -2]", "r2.uvalue=[18446744071562067968, 18446744073709551614]",
       "r2.svalue-r1.svalue<=-1",
       "r2.uvalue-r1.uvalue<=-1"]
---
test-case: "assume [-1, 1] <= [-1, 1] nop"
pre: ["r1.type=number", "r1.svalue=[-1, 1]",
      "r2.type=number", "r2.svalue=[-1, 1]"]
code:
  <start>: |
    assume r1 <= r2
post: ["r1.type=number", "r1.svalue=[-1, 1]",
       "r2.type=number", "r2.svalue=[-1, 1]",
       "r1.uvalue-r2.uvalue<=0"]
---
test-case: "assume [-1, 1] w<= [-1, 1] nop"
pre: ["r1.type=number", "r1.svalue=[-1, 1]",
      "r2.type=number", "r2.svalue=[-1, 1]"]
code:
  <start>: |
    assume w1 <= r2
post: ["r1.type=number", "r1.svalue=[-1, 1]",
       "r2.type=number", "r2.svalue=[-1, 1]"]
---
test-case: "assume 11 != 11 implies bottom"
pre: ["r1.type=number", "r1.svalue=11", "r1.uvalue=11"]
code:
  <start>: assume r1 != 11
post: []
messages:
  - "0: Code is unreachable after 0"
---
test-case: "assume [0, 1] != 1 narrows to 0"
pre: ["r1.type=number", "r1.svalue=[0, 1]", "r1.uvalue=[0, 1]"]
code:
  <start>: assume r1 != 1
post: ["r1.type=number", "r1.svalue=0", "r1.uvalue=0"]
---
test-case: "assume [1, 2] != 1 narrows to 2"
pre: ["r1.type=number", "r1.svalue=[1, 2]", "r1.uvalue=[1, 2]"]
code:
  <start>: assume r1 != 1
post: ["r1.type=number", "r1.svalue=2", "r1.uvalue=2"]
---
test-case: "assume 4294967307 w!= 11 implies bottom"
pre: ["r1.type=number", "r1.svalue=4294967307", "r1.uvalue=4294967307"]
code:
  <start>: assume w1 != 11
post: []
messages:
  - "0: Code is unreachable after 0"
