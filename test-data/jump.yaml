# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: jump to fallthrough

pre: []

code:
  <start>: |
    r0 = 0
    if r0 != 0 goto <exit>
  <exit>: |
    exit

post:
  - r0.type=number
  - r0.svalue=0
  - r0.uvalue=0
messages: []

---
test-case: simple conditional jump forward

pre: [r1.type=number]

code:
  <start>: |
    r0 = 0
    if r1 == 0 goto <out>
    r0 = 1
  <out>: |
    exit

post:
  - r0.type=number
  - r0.svalue=[0, 1]
  - r0.uvalue=r0.svalue
  - r1.uvalue=r0.svalue
  - r1.type=number
---
test-case: simple unconditional jump forward

pre: []

code:
  <start>: |
    r0 = 0;
    goto <out>;
  <out>: |
    exit;

post:
  - r0.type=number
  - r0.svalue=0
  - r0.uvalue=0
---
test-case: simple conditional vacuous jump forward

pre: []

code:
  <start>: |
    r0 = 0
    if r0 == 0 goto <label_0>
  <label_0>: |
    exit

post:
  - r0.type=number
  - r0.svalue=0
  - r0.uvalue=0
---
test-case: assume number s< imm

pre: [r1.type=number]

code:
  <start>: |
    assume r1 s< 10

post:
  - r1.type=number
  - r1.svalue=[-oo, 9]
---
test-case: assume number w== imm

pre: [r1.type=number, r1.svalue=4294967307, r1.uvalue=4294967307]

code:
  <start>: |
    assume w1 == 11

post:
  - r1.type=number
  - r1.svalue=4294967307
  - r1.uvalue=4294967307
---
test-case: assume range w== imm

pre: ["r1.type=number", "r1.svalue=[4294967306, 4294967307]", "r1.uvalue=[4294967306, 4294967307]"]

code:
  <start>: |
    assume w1 == 11

post:
  - r1.type=number
  - r1.svalue=4294967307
  - r1.uvalue=4294967307
---
test-case: assume range w== imm goes to bottom

pre: ["r1.type=number", "r1.svalue=[4294967306, 4294967307]", "r1.uvalue=[4294967306, 4294967307]"]

code:
  <start>: |
    assume w1 == 13

post: []
messages:
  - "0: Code becomes unreachable (assume r1 w== 13)"
---
test-case: assume number w!= reg

pre: [r1.type=number, r1.svalue=10, r1.uvalue=10,
      r2.type=number, r2.svalue=11, r2.uvalue=11]

code:
  <start>: |
    assume w1 != r2

post:
  - r1.type=number
  - r1.svalue=10
  - r1.uvalue=10
  - r2.type=number
  - r2.svalue=11
  - r2.uvalue=11
---
test-case: assume number < imm

pre: [r1.type=number]

code:
  <start>: |
    assume r1 < 10

post:
  - r1.type=number
  - r1.svalue=[0, 9]
  - r1.uvalue=[0, 9]
---
test-case: assume interval < imm

pre: ["r1.type=number", "r1.svalue=[0, 2]", "r1.uvalue=[0, 2]"]

code:
  <start>: |
    assume r1 < 2

post:
  - r1.type=number
  - r1.svalue=[0, 1]
  - r1.uvalue=[0, 1]
---
test-case: assume interval <= imm

pre: ["r1.type=number", "r1.svalue=[0, 3]", "r1.uvalue=[0, 3]"]

code:
  <start>: |
    assume r1 <= 2

post:
  - r1.type=number
  - r1.svalue=[0, 2]
  - r1.uvalue=[0, 2]
---
test-case: jslt-imm

pre: []

code:
  <start>: |
    r0 = 0
    r1 = 0xfffffffe
    if r1 s< 0xfffffffd goto <exit> ; Not taken
    if r1 s< 0xfffffffe goto <exit> ; Not taken
    if r1 s< 0xffffffff goto <exit1> ; Taken
  <exit>: |
    exit
  <exit1>: |
    r0 = 1
    goto <exit>

post:
  - r1.type=number
  - r1.svalue=-2
  - r1.uvalue=18446744073709551614
  - r0.type=number
  - r0.svalue=1
  - r0.uvalue=1
messages:
  - "2:5: Code becomes unreachable (assume r1 s< -3)"
  - "3:5: Code becomes unreachable (assume r1 s< -2)"
  - "4:5: Code becomes unreachable (assume r1 s>= -1)"
---
test-case: jump-32

pre: []

code:
  <start>: |
    r1 = 1
    r1 <<= 32
    r1 |= 5
    if w1 < 4 goto <exit0> ; Not taken
    if w1 < 5 goto <exit0> ; Not taken
    if w1 < 6 goto <exit1> ; Taken
    goto <exit0>
  <exit1>: |
    r0 = 1
    goto <exit>
  <exit0>: |
    r0 = 0
    goto <exit>
  <exit>: |
    exit

post:
  - r1.type=number
  - r1.svalue=4294967301
  - r1.uvalue=4294967301
  - r0.type=number
  - r0.svalue=1
  - r0.uvalue=1
messages:
  - "3:9: Code becomes unreachable (assume r1 w< 4)"
  - "4:9: Code becomes unreachable (assume r1 w< 5)"
  - "5:6: Code becomes unreachable (assume r1 w>= 6)"
---
test-case: join stack

pre: ["r0.type=number",
      "r1.type=packet", "r1.packet_offset=8",
      "r2.type=stack", "r2.stack_offset=4", "r2.stack_numeric_size=8",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number"]

code:
  <start>: |
    if r0 == 0 goto <mid>
    *(u64 *)(r10 - 8) = r1
    goto <out>
  <mid>: |
    *(u64 *)(r10 - 8) = r2
  <out>: |
    exit

post:
  - r0.type=number
  - r0.uvalue=[0, +oo]
  - r1.type=packet
  - r1.packet_offset=8
  - r2.type=stack
  - r2.stack_offset=4
  - r2.stack_numeric_size=8
  - r10.type=stack
  - r10.stack_offset=512
  - s[4...11].type=number
  - s[504...511].type in {packet, stack}
  - s[504...511].packet_offset=8
  - s[504...511].stack_offset=4
  - s[504...511].stack_numeric_size=8
---
test-case: same_type subtract

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=4",
      "r9.type=ctx", "r9.ctx_offset=0"]

code:
  <start>: |
    if r0 == 0 goto <ctx>
  <number>: |
    r1 = 1
    r2 = r0
    goto <out>
  <ctx>: |
    r1 = r8
    r2 = r9
    goto <out>
  <out>: |
    r3 = r2
    r3 -= r1; trigger same_type(r2, r1)

post:
  - r0.type=number
  - r0.uvalue=[0, +oo]
  - r1.ctx_offset=4
  - r1.type in {number, ctx}
  - r2.type=r1.type
  - r2.ctx_offset=0
  - r3.type=number
  - r8.ctx_offset=4
  - r8.type=ctx
  - r9.ctx_offset=0
  - r9.type=ctx

---
test-case: not same_type

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=4",
      "r9.type=ctx", "r9.ctx_offset=0"]

code:
  <start>: |
    if r0 == 0 goto <ctx>
  <number>: |
    r1 = 1
    r2 = r9
    goto <out>
  <ctx>: |
    r1 = r8
    r2 = r0
    goto <out>
  <out>: |
    r3 = r2
    r3 -= r1; trigger same_type(r2, r1)


post:
  - r0.type=number
  - r0.uvalue=[0, +oo]
  - r1.ctx_offset=4
  - r1.type in {number, ctx}
  - r2.ctx_offset=0
  - r2.type in {number, ctx}
  - r2.type-r0.uvalue<=-4
  - r8.ctx_offset=4
  - r8.type=ctx
  - r9.ctx_offset=0
  - r9.type=ctx

messages:
  - "8: Cannot subtract pointers to different regions (r1.type == number or r3.type == r1.type in {ctx, stack, packet})"
---
test-case: multiple types add ok

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=0",
      "r9.type=packet", "r9.packet_offset=0"]

code:
  <start>: |
    r1 = 4
    if r0 == 0 goto <ctxnum>
  <numctx>: |
    r2 = r8
    goto <out>
  <ctxnum>: |
    r2 = r9
    goto <out>
  <out>: |
    r3 = r1
    r3 += r2
    r4 = r2
    r4 += r1

post:
  - r0.type=number
  - r0.uvalue=[0, +oo]
  - r1.type=number
  - r1.svalue=4
  - r1.uvalue=4
  - r2.ctx_offset=0
  - r2.packet_offset=0
  - r2.type in {ctx, packet}
  - r3.ctx_offset=4
  - r3.packet_offset=4
  - r3.type in {ctx, packet}
  - r4.ctx_offset=4
  - r4.packet_offset=4
  - r4.type in {ctx, packet}
  - r8.ctx_offset=0
  - r8.type=ctx
  - r9.packet_offset=0
  - r9.type=packet
---
test-case: multiple types add fail

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=0", "r8.svalue=1024", "r8.uvalue=1024"]

code:
  <start>: |
    if r0 == 0 goto <ctxnum>
  <numctx>: |
    r1 = 4
    r2 = r8
    goto <out>
  <ctxnum>: |
    r1 = r8
    r2 = 4
    goto <out>
  <out>: |
    r3 = r1
    r3 += r2; the domain does not currently store inequalities so we can't yet tell that this is safe

post:
  - r1.uvalue=r1.svalue
  - r2.uvalue=r2.svalue
  - r3.type=r1.type
  - r3.uvalue=r3.svalue
  - r3.ctx_offset=r2.ctx_offset
  - r0.type=number
  - r0.uvalue=[0, +oo]
  - r1.ctx_offset=0
  - r1.type in {number, ctx}
  - r1.type-r1.svalue<=-8
  - r1.type-r3.svalue<=-12
  - r1.svalue-r1.type<=1027
  - r1.svalue-r3.svalue<=-4
  - r1.svalue=[4, 1024]
  - r2.ctx_offset=0
  - r2.type in {number, ctx}
  - r2.type-r2.svalue<=-8
  - r2.type-r3.svalue<=-12
  - r2.svalue-r0.uvalue<=1023
  - r2.svalue-r2.type<=1027
  - r2.svalue-r3.svalue<=-4
  - r2.svalue=[4, 1024]
  - r2.type-r0.uvalue<=-4
  - r3.svalue-r0.uvalue<=3071
  - r3.svalue-r1.type<=3075
  - r3.svalue-r1.svalue<=2048
  - r3.svalue-r2.type<=3075
  - r3.svalue-r2.svalue<=2048
  - r3.svalue=[8, 3072]
  - r8.ctx_offset=0
  - r8.type=ctx
  - r8.svalue=1024
  - r8.uvalue=1024

messages:
  - "8: Only numbers can be added to pointers (r2.type in {ctx, stack, packet, shared} -> r3.type == number)"
  - "8: Only numbers can be added to pointers (r3.type in {ctx, stack, packet, shared} -> r2.type == number)"
---
test-case: multiple types compare

pre: ["r0.type=number",
      "r6.type=stack", "r6.stack_offset=4",
      "r7.type=stack", "r7.stack_offset=0",
      "r8.type=packet", "r8.packet_offset=4",
      "r9.type=packet", "r9.packet_offset=0",
      "r10.type=stack", "r10.stack_offset=512",
      "meta_offset=0"]

code:
  <start>: |
    if r0 == 0 goto <packet>
  <stack>: |
    r1 = r6
    r2 = r7
    goto <join>
  <packet>: |
    r1 = r8
    r2 = r9
    goto <join>
  <join>: |
    if r1 == r2 goto <out> ; trigger same_type(r1, r2)
    r0 = 42
  <out>: |
    exit

post:
  - meta_offset=0
  - r0.type=number
  - r0.svalue=42
  - r0.uvalue=42
  - r1.stack_offset=4
  - r1.packet_offset=4
  - r1.type in {packet, stack}
  - r2.type=r1.type
  - r2.stack_offset=0
  - r2.packet_offset=0
  - r6.type=stack
  - r6.stack_offset=4
  - r7.type=stack
  - r7.stack_offset=0
  - r8.type=packet
  - r8.packet_offset=4
  - r9.type=packet
  - r9.packet_offset=0
  - r10.type=stack
  - r10.stack_offset=512

messages:
  - "7:9: Code becomes unreachable (assume r1 == r2)"
---
test-case: lost implications in correlated branches

pre: ["meta_offset=0", "packet_size=[36, 65534]",
      "r1.type=packet", "r1.packet_offset=54",
      "r2.type=packet", "r2.packet_offset=packet_size"]

code:
  <start>: |
    r0 = 0
    if r1 > r2 goto <bad>
    r4 = 0                ; r1 is within packet
    goto <join>
  <bad>: |
    r4 = 1                ; r1 is past end of packet
    goto <join>
  <join>: |
    if r4 == 1 goto <end> ; skip to end if r1 is past end of packet
    r0 = *(u64 *)(r1 - 8) ; this should be safe to dereference but the verifier fails it
  <end>: |
    exit

post:
  - meta_offset=0
  - packet_size=[36, 65534]
  - r2.packet_offset=packet_size
  - packet_size-r1.packet_offset<=65480
  - r0.type=number
  - r1.type=packet
  - r1.packet_offset=54
  - r1.packet_offset-packet_size<=18
  - r2.type=packet
  - r4.type=number
  - r4.svalue=[0, 1]
  - r4.uvalue=r4.svalue

messages:
  - "7: Upper bound must be at most packet_size (valid_access(r1.offset-8, width=8) for read)"
---
test-case: 32-bit compare

pre: ["r4.type=number", "r4.svalue=-22", "r4.uvalue=18446744073709551594"]

code:
  <start>: |
    if w4 != 0 goto <good>
    r0 = 1 ; this should never happen
  <good>: |
    r0 = 0
    goto <out>
  <out>: |
    exit

post:
  - r0.type=number
  - r0.svalue=0
  - r0.uvalue=0
  - r4.type=number
  - r4.svalue=-22
  - r4.uvalue=18446744073709551594

messages:
  - "0:1: Code becomes unreachable (assume r4 w== 0)"
---
test-case: unsigned comparison of negative number

pre: ["r0.type=number", "r0.svalue=1", "r0.uvalue=1",
      "r1.type=number", "r1.svalue=-1", "r1.uvalue=18446744073709551615"]

code:
  <start>: |
    if r1 > 0 goto <label_0> ; unsigned comparison so should be true
    r0 = 0                   ; this should not be executed
  <label_0>: |
    exit                     ; this is ok to execute but currently fails verification

post:
  - r0.type=number
  - r0.svalue=1
  - r0.uvalue=1
  - r1.type=number
  - r1.svalue=-1
  - r1.uvalue=18446744073709551615

messages:
  - "0:1: Code becomes unreachable (assume r1 <= 0)"
---
test-case: JMP32

pre: ["r0.type=number", "r0.svalue=0", "r0.uvalue=0",
      "r1.type=number", "r1.svalue=4294967294", "r1.uvalue=4294967294"]

code:
  <start>: |
    if w1 s> 0 goto <label_0> ; 0xfffffffe should be negative in a 32-bit comparison
    r0 = 1                    ; this should be executed
  <label_0>: |
    exit

post:
  - r0.type=number
  - r0.svalue=1
  - r0.uvalue=1
  - r1.type=number
  - r1.svalue=4294967294
  - r1.uvalue=4294967294

messages:
  - "0:2: Code becomes unreachable (assume r1 ws> 0)"
---
test-case: assume map_fd == map_fd

pre: ["r1.type=map_fd"]

code:
  <start>: |
    assume r1 == r1

post:
  - r1.type=map_fd
---
test-case: assume map_fd != map_fd

pre: ["r1.type=map_fd"]

code:
  <start>: |
    assume r1 != r1

post: []
messages:
  - "0: Code becomes unreachable (assume r1 != r1)"
---
test-case: assume map_fd1 != map_fd2

pre: ["r1.type=map_fd", "r1.map_fd=1", "r2.type=map_fd", "r2.map_fd=2"]

code:
  <start>: |
    assume r1 != r2

post:
  - r1.type=map_fd
  - r1.map_fd=1
  - r2.type=map_fd
  - r2.map_fd=2
---
test-case: assume map_fd1 != map_fd2

pre: ["r1.type=map_fd", "r1.map_fd=1", "r2.type=map_fd", "r2.map_fd=1"]

code:
  <start>: |
    assume r1 != r2

post: []
messages:
  - "0: Code becomes unreachable (assume r1 != r2)"
---
test-case: assume map_fd1 < map_fd2

pre: ["r1.type=map_fd", "r1.map_fd=1", "r2.type=map_fd", "r2.map_fd=2"]

code:
  <start>: |
    assume r1 < r2

post:
  - r1.type=map_fd
  - r1.map_fd=1
  - r2.type=map_fd
  - r2.map_fd=2
  - r1.map_fd-r2.map_fd<=-1

messages:
  - "0: Invalid type (r1.type in {number, ctx, stack, packet, shared})"

# # Test cases for special case of comparison of not a number against a number when immediate is 0
---
test-case: JEQ with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 == 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post:
  - r0.svalue=1
  - r0.type=number
  - r0.uvalue=1
  - r1.ctx_offset=0
  - r1.svalue=[1, 2147418112]
  - r1.type=ctx

messages:
  - "0:2: Code becomes unreachable (assume r1 == 0)"
---
test-case: JNE with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 != 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0:1: Code becomes unreachable (assume r1 == 0)"
  - "2: Invalid type (r0.type == number)"

---
test-case: JSET with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 &== 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "2: Invalid type (r0.type == number)"

---
test-case: JNSET with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 &!= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "2: Invalid type (r0.type == number)"

---
test-case: JLT with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 < 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post:
  - r0.svalue=1
  - r0.type=number
  - r0.uvalue=1
  - r1.ctx_offset=0
  - r1.svalue=[1, 2147418112]
  - r1.type=ctx
  - r1.uvalue=[0, +oo]

messages:
  - "0:2: Code becomes unreachable (assume r1 < 0)"

---
test-case: JLE with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 <= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post:
  - r0.svalue=1
  - r0.type=number
  - r0.uvalue=1
  - r1.ctx_offset=0
  - r1.svalue=[1, 2147418112]
  - r1.type=ctx
  - r1.uvalue=[1, +oo]

messages:
  - "0:2: Code becomes unreachable (assume r1 <= 0)"

---
test-case: JGT with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 > 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0:1: Code becomes unreachable (assume r1 <= 0)"
  - "2: Invalid type (r0.type == number)"

---
test-case: JGE with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 >= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0:1: Code becomes unreachable (assume r1 < 0)"
  - "2: Invalid type (r0.type == number)"

---
test-case: JSLT with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 s< 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSLE with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 s<= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSGT with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 s> 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSGE with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if r1 s>= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JEQ32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 == 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JNE32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 != 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSET32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 &== 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JNSET32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 &!= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JLT32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 < 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JLE32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 <= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JGT32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 > 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JGE32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 >= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSLT32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 s< 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSLE32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 s<= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSGT32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 s> 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"

---
test-case: JSGE32 with imm 0 and pointer
options: ["assume_assertions"]
pre:
  - "r1.type=ctx"
  - "r1.svalue=[1, 2147418112]"
  - "r1.ctx_offset=0"

code:
  <start>: |
    if w1 s>= 0 goto <exit>
    r0 = 1
  <exit>: |
    exit

post: []

messages:
  - "0: Invalid type (r1.type == number)"
