# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: simple conditional jump forward

pre: [r1.type=number]

code:
  <start>: |
    r0 = 0
    if r1 == 0 goto <out>
    r0 = 1
  <out>: |
    exit

post:
  - r0.type=number
  - r0.value=[0, 1]
  - r1.type=number

---
test-case: simple unconditional jump forward

pre: []

code:
  <start>: |
    r0 = 0;
    goto <out>;
  <out>: |
    exit;

post:
  - r0.type=number
  - r0.value=0
---
test-case: simple conditional vacuous jump forward

pre: []

code:
  <start>: |
    r0 = 0
    if r0 == 0 goto <label_0>
  <label_0>: |
    exit

post:
  - r0.type=number
  - r0.value=0
---
test-case: join stack

pre: ["r0.type=number",
      "r1.type=packet", "r1.packet_offset=8",
      "r2.type=stack", "r2.stack_offset=4", "r2.stack_numeric_size=8",
      "r10.type=stack", "r10.stack_offset=512",
      "s[4...11].type=number"]

code:
  <start>: |
    if r0 == 0 goto <mid>
    *(u64 *)(r10 - 8) = r1
    goto <out>
  <mid>: |
    *(u64 *)(r10 - 8) = r2
  <out>: |
    exit

post:
  - r0.type=number
  - r1.type=packet
  - r1.packet_offset=8
  - r2.type=stack
  - r2.stack_offset=4
  - r2.stack_numeric_size=8
  - r10.type=stack
  - r10.stack_offset=512
  - s[4...11].type=number
  - s[504...511].type in {packet, stack}
  - s[504...511].packet_offset=8
  - s[504...511].stack_offset=4
  - s[504...511].stack_numeric_size=8
---
test-case: same_type subtract

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=4",
      "r9.type=ctx", "r9.ctx_offset=0"]

code:
  <start>: |
    if r0 == 0 goto <ctx>
  <number>: |
    r1 = 1
    r2 = r0
    goto <out>
  <ctx>: |
    r1 = r8
    r2 = r9
    goto <out>
  <out>: |
    r3 = r2
    r3 -= r1; trigger same_type(r2, r1)

post:
  - r0.type=number
  - r1.ctx_offset=4
  - r1.type in {number, ctx}
  - r1.type=r2.type
  - r2.ctx_offset=0
  - r2.type in {number, ctx}
  - r3.type=number
  - r8.ctx_offset=4
  - r8.type=ctx
  - r9.ctx_offset=0
  - r9.type=ctx

---
test-case: not same_type

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=4",
      "r9.type=ctx", "r9.ctx_offset=0"]

code:
  <start>: |
    if r0 == 0 goto <ctx>
  <number>: |
    r1 = 1
    r2 = r9
    goto <out>
  <ctx>: |
    r1 = r8
    r2 = r0
    goto <out>
  <out>: |
    r3 = r2
    r3 -= r1; trigger same_type(r2, r1)


post:
  - r0.type=number
  - r1.ctx_offset=4
  - r1.type in {number, ctx}
  - r2.ctx_offset=0
  - r2.type in {number, ctx}
  - r8.ctx_offset=4
  - r8.type=ctx
  - r9.ctx_offset=0
  - r9.type=ctx

messages:
  - "8: Cannot subtract pointers to different regions (r1.type == number or r3.type == r1.type in {ctx, stack, packet})"
---
test-case: multiple types add ok

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=0",
      "r9.type=packet", "r9.packet_offset=0"]

code:
  <start>: |
    r1 = 4
    if r0 == 0 goto <ctxnum>
  <numctx>: |
    r2 = r8
    goto <out>
  <ctxnum>: |
    r2 = r9
    goto <out>
  <out>: |
    r3 = r1
    r3 += r2
    r4 = r2
    r4 += r1

post:
  - r0.type=number
  - r1.type=number
  - r1.value=4
  - r2.ctx_offset=0
  - r2.packet_offset=0
  - r2.type in {ctx, packet}
  - r3.ctx_offset=4
  - r3.packet_offset=4
  - r3.type in {ctx, packet}
  - r4.ctx_offset=4
  - r4.packet_offset=4
  - r4.type in {ctx, packet}
  - r8.ctx_offset=0
  - r8.type=ctx
  - r9.packet_offset=0
  - r9.type=packet
---
test-case: multiple types add fail

pre: ["r0.type=number",
      "r8.type=ctx", "r8.ctx_offset=0", "r8.value=1024"]

code:
  <start>: |
    if r0 == 0 goto <ctxnum>
  <numctx>: |
    r1 = 4
    r2 = r8
    goto <out>
  <ctxnum>: |
    r1 = r8
    r2 = 4
    goto <out>
  <out>: |
    r3 = r1
    r3 += r2; the domain does not currently store inequalities so we can't yet tell that this is safe

post:
  - r0.type=number
  - r1.ctx_offset=0
  - r1.type in {number, ctx}
  - r1.type-r1.value<=-8
  - r1.type-r3.ctx_offset<=-3
  - r1.type-r3.type<=0
  - r1.type-r3.value<=-12
  - r1.value-r1.type<=1027
  - r1.value-r3.ctx_offset<=1024
  - r1.value-r3.type<=1027
  - r1.value-r3.value<=-4
  - r1.value=[4, 1024]
  - r2.ctx_offset=0
  - r2.type in {number, ctx}
  - r2.ctx_offset-r3.ctx_offset<=0
  - r2.type-r2.value<=-8
  - r2.type-r3.value<=-12
  - r2.value-r2.type<=1027
  - r2.value-r3.value<=-4
  - r2.value=[4, 1024]
  - r3.ctx_offset-r1.type<=1028
  - r3.ctx_offset-r1.value<=1020
  - r3.ctx_offset-r2.ctx_offset<=1024
  - r3.ctx_offset-r2.type<=2043
  - r3.ctx_offset-r2.value<=1020
  - r3.ctx_offset-r3.type<=1027
  - r3.ctx_offset-r3.value<=1016
  - r3.ctx_offset=[0, 1024]
  - r3.type in {number, ctx}
  - r3.type-r1.type<=1
  - r3.type-r1.value<=-7
  - r3.type-r3.ctx_offset<=-3
  - r3.type-r3.value<=-11
  - r3.value-r1.type<=3075
  - r3.value-r1.value<=2048
  - r3.value-r2.type<=3075
  - r3.value-r2.value<=2048
  - r3.value-r3.ctx_offset<=3072
  - r3.value-r3.type<=3075
  - r3.value=[8, 3072]
  - r8.ctx_offset=0
  - r8.type=ctx
  - r8.value=1024

messages:
  - "8: Only numbers can be added to pointers (r2.type in {ctx, stack, packet, shared} -> r3.type == number)"
  - "8: Only numbers can be added to pointers (r3.type in {ctx, stack, packet, shared} -> r2.type == number)"
---
test-case: multiple types compare

pre: ["r0.type=number",
      "r6.type=stack", "r6.stack_offset=4",
      "r7.type=stack", "r7.stack_offset=0",
      "r8.type=packet", "r8.packet_offset=4",
      "r9.type=packet", "r9.packet_offset=0",
      "meta_offset=0"]

code:
  <start>: |
    if r0 == 0 goto <packet>
  <stack>: |
    r1 = r6
    r2 = r7
    goto <join>
  <packet>: |
    r1 = r8
    r2 = r9
    goto <join>
  <join>: |
    if r1 == r2 goto <out> ; trigger same_type(r1, r2)
    r0 = 42
  <out>: |
    exit

post:
  - meta_offset=0
  - r0.type=number
  - r0.value=42
  - r1.stack_offset=4
  - r1.packet_offset=4
  - r1.type in {packet, stack}
  - r1.type=r2.type
  - r2.stack_offset=0
  - r2.packet_offset=0
  - r2.type in {packet, stack}
  - r6.type=stack
  - r6.stack_offset=4
  - r7.type=stack
  - r7.stack_offset=0
  - r8.type=packet
  - r8.packet_offset=4
  - r9.type=packet
  - r9.packet_offset=0

messages:
  - "7:9: Code is unreachable after 7:9"
---
test-case: lost implications in correlated branches

pre: ["meta_offset=0", "packet_size=[36, 65534]",
      "r1.type=packet", "r1.packet_offset=54",
      "r2.type=packet", "r2.packet_offset=packet_size"]

code:
  <start>: |
    r0 = 0
    if r1 > r2 goto <bad>
    r4 = 0                ; r1 is within packet
    goto <join>
  <bad>: |
    r4 = 1                ; r1 is past end of packet
    goto <join>
  <join>: |
    if r4 == 1 goto <end> ; skip to end if r1 is past end of packet
    r0 = *(u64 *)(r1 - 8) ; this should be safe to dereference but the verifier fails it
  <end>: |
    exit

post:
  - meta_offset=0
  - packet_size=[36, 65534]
  - packet_size=r2.packet_offset
  - packet_size-r1.packet_offset<=65480
  - r0.type=number
  - r1.type=packet
  - r1.packet_offset=54
  - r1.packet_offset-packet_size<=18
  - r1.packet_offset-r2.packet_offset<=18
  - r2.type=packet
  - r2.packet_offset=[36, 65534]
  - r2.packet_offset-r1.packet_offset<=65480
  - r4.type=number
  - r4.value=[0, 1]

messages:
  - "7: Upper bound must be at most packet_size (valid_access(r1.offset-8, width=8) for read)"
---
test-case: 32-bit compare

pre: ["r4.type=number", "r4.value=-22"]

code:
  <start>: |
    if w4 != 0 goto <good>
    r0 = 1 ; this should never happen
  <good>: |
    r0 = 0
    goto <out>
  <out>: |
    exit

post:
  - r0.type=number
  - r0.value=0
  - r4.type=number
  - r4.value=-22

messages:
  - "0:1: Code is unreachable after 0:1"
