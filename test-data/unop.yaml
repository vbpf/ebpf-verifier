# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: negation of unknown number

pre: ["r1.type=number"]

code:
  <start>: |
    r1 = -r1

post: ["r1.type=number"]
---
test-case: negation of 32-bit singleton number

pre: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5"]

code:
  <start>: |
    w1 = -w1

post: ["r1.type=number", "r1.svalue=4294967291", "r1.uvalue=4294967291"]
---
test-case: negation of 64-bit singleton number

pre: ["r1.type=number", "r1.svalue=5", "r1.uvalue=5"]

code:
  <start>: |
    r1 = -r1

post: ["r1.type=number", "r1.svalue=-5", "r1.uvalue=18446744073709551611"]
---
test-case: negation of finite interval number

pre: ["r1.type=number", "r1.svalue=[-5, 5]"]

code:
  <start>: |
    r1 = -r1

post: ["r1.type=number", "r1.svalue=[-5, 5]"]
---
test-case: be16 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=6636321", "r1.uvalue=6636321"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = be16 r1 ; 0x654321 -> 0x2143

post: ["r1.type=number", "r1.svalue=8515", "r1.uvalue=8515"]
---
test-case: be16 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=6636321", "r1.uvalue=6636321"]

options: ["big_endian"]

code:
  <start>: |
    r1 = be16 r1 ; 0x654321 -> 0x4321

post: ["r1.type=number", "r1.svalue=17185", "r1.uvalue=17185"]
---
test-case: be32 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = be32 r1 ; 0x0987654321 -> 0x21436587

post: ["r1.type=number", "r1.svalue=558065031", "r1.uvalue=558065031"]
---
test-case: be32 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["big_endian"]

code:
  <start>: |
    r1 = be32 r1 ; 0x0987654321 -> 0x87654321

post: ["r1.type=number", "r1.svalue=2271560481", "r1.uvalue=2271560481"]
---
test-case: be64 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = be64 r1 ; 0x0987654321 -> 0x2143658709000000

post: ["r1.type=number", "r1.svalue=2396871057337221120", "r1.uvalue=2396871057337221120"]
---
test-case: be64 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["big_endian"]

code:
  <start>: |
    r1 = be64 r1 ; nop

post: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]
---
test-case: be16 range on little-endian

pre: ["r1.type=number", "r1.svalue=[0, 2]", "r1.uvalue=[0, 2]", "r1.uvalue=r1.svalue"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = be16 r1 ; [0x0000, 0x0002] -> [0x0000, 0x2000] but currently we just lose the range

post: ["r1.type=number"]
---
test-case: be16 range on big-endian

pre: ["r1.type=number", "r1.svalue=[0, 2]", "r1.uvalue=[0, 2]", "r1.uvalue=r1.svalue"]

options: ["big_endian"]

code:
  <start>: |
    r1 = be16 r1 ; nop. this could preserve the range but we don't support that yet

post: ["r1.type=number"]
---
test-case: le16 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=6636321", "r1.uvalue=6636321"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = le16 r1 ; 0x654321 -> 0x4321

post: ["r1.type=number", "r1.svalue=17185", "r1.uvalue=17185"]
---
test-case: le16 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=6636321", "r1.uvalue=6636321"]

options: ["big_endian"]

code:
  <start>: |
    r1 = le16 r1 ; 0x654321 -> 0x2143

post: ["r1.type=number", "r1.svalue=8515", "r1.uvalue=8515"]
---
test-case: le32 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = le32 r1 ; 0x0987654321 -> 0x87654321

post: ["r1.type=number", "r1.svalue=2271560481", "r1.uvalue=2271560481"]
---
test-case: le32 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["big_endian"]

code:
  <start>: |
    r1 = le32 r1 ; 0x0987654321 -> 0x21436587

post: ["r1.type=number", "r1.svalue=558065031", "r1.uvalue=558065031"]
---
test-case: le64 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = le64 r1 ; nop

post: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]
---
test-case: le64 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["big_endian"]

code:
  <start>: |
    r1 = le64 r1 ; 0x0987654321 -> 0x2143658709000000

post: ["r1.type=number", "r1.svalue=2396871057337221120", "r1.uvalue=2396871057337221120"]
---
test-case: le16 range on little-endian

pre: ["r1.type=number", "r1.svalue=[0, 2]", "r1.uvalue=[0, 2]", "r1.uvalue=r1.svalue"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = le16 r1 ; nop. this could preserve the range but we don't support that yet

post: ["r1.type=number"]
---
test-case: le16 range on big-endian

pre: ["r1.type=number", "r1.svalue=[0, 2]", "r1.uvalue=[0, 2]", "r1.uvalue=r1.svalue"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = le16 r1

post: ["r1.type=number"]
---
test-case: swap16 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=6636321", "r1.uvalue=6636321"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = swap16 r1 ; 0x654321 -> 0x2143

post: ["r1.type=number", "r1.svalue=8515", "r1.uvalue=8515"]
---
test-case: swap16 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=6636321", "r1.uvalue=6636321"]

options: ["big_endian"]

code:
  <start>: |
    r1 = swap16 r1 ; 0x654321 -> 0x2143

post: ["r1.type=number", "r1.svalue=8515", "r1.uvalue=8515"]
---
test-case: swap32 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = swap32 r1 ; 0x0987654321 -> 0x21436587

post: ["r1.type=number", "r1.svalue=558065031", "r1.uvalue=558065031"]
---
test-case: swap32 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["big_endian"]

code:
  <start>: |
    r1 = swap32 r1 ; 0x0987654321 -> 0x21436587

post: ["r1.type=number", "r1.svalue=558065031", "r1.uvalue=558065031"]
---
test-case: swap64 singleton on little-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = swap64 r1 ; 0x0987654321 -> 0x2143658709000000

post: ["r1.type=number", "r1.svalue=2396871057337221120", "r1.uvalue=2396871057337221120"]
---
test-case: swap64 singleton on big-endian

pre: ["r1.type=number", "r1.svalue=40926266145", "r1.uvalue=40926266145"]

options: ["big_endian"]

code:
  <start>: |
    r1 = swap64 r1 ; 0x0987654321 -> 0x2143658709000000

post: ["r1.type=number", "r1.svalue=2396871057337221120", "r1.uvalue=2396871057337221120"]
---
test-case: swap16 range on little-endian

pre: ["r1.type=number", "r1.svalue=[0, 2]", "r1.uvalue=[0, 2]", "r1.uvalue=r1.svalue"]

options: ["!big_endian"]

code:
  <start>: |
    r1 = swap16 r1 ; [0x0000, 0x0002] -> [0x0000, 0x2000] but currently we just lose the range

post: ["r1.type=number"]
---
test-case: swap16 range on big-endian

pre: ["r1.type=number", "r1.svalue=[0, 2]", "r1.uvalue=[0, 2]", "r1.uvalue=r1.svalue"]

options: ["big_endian"]

code:
  <start>: |
    r1 = swap16 r1 ; [0x0000, 0x0002] -> [0x0000, 0x2000] but currently we just lose the range

post: ["r1.type=number"]
