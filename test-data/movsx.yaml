# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: movsx8 immediate to 32 bits

pre: []

code:
  <start>: |
    w1 s8= 384 ; 0x180 -> 0xFFFFFF80

post:
  - r1.type=number
  - r1.svalue=4294967168
  - r1.uvalue=4294967168
---
test-case: movsx16 immediate to 32 bits

pre: []

code:
  <start>: |
    w1 s16= 98304 ; 0x18000 -> 0xFFFF8000

post:
  - r1.type=number
  - r1.svalue=4294934528
  - r1.uvalue=4294934528
---
test-case: movsx8 immediate to 64 bits

pre: []

code:
  <start>: |
    r1 s8= 384 ; 0x180 -> 0xFFFFFFFFFFFFFF80

post:
  - r1.type=number
  - r1.svalue=-128
  - r1.uvalue=18446744073709551488
---
test-case: movsx16 immediate to 64 bits

pre: []

code:
  <start>: |
    r1 s16= 98304 ; 0x18000 -> 0xFFFFFFFFFFFF8000

post:
  - r1.type=number
  - r1.svalue=-32768
  - r1.uvalue=18446744073709518848
---
test-case: movsx32 immediate to 64 bits

pre: []

code:
  <start>: |
    r1 s32= 2147483648 ; 0x80000000 -> 0xFFFFFFFF80000000

post:
  - r1.type=number
  - r1.svalue=-2147483648
  - r1.uvalue=18446744071562067968
---
test-case: movsx8 register to 32 bits

pre: ["r1.svalue=384", "r1.uvalue=384", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    w2 s8= r1

post:
  - r1.type=number
  - r1.svalue=384
  - r1.uvalue=384
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=4294967168
  - r2.uvalue=4294967168
---
test-case: movsx16 register to 32 bits

pre: ["r1.svalue=98304", "r1.uvalue=98304", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    w2 s16= r1

post:
  - r1.type=number
  - r1.svalue=98304
  - r1.uvalue=98304
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=4294934528
  - r2.uvalue=4294934528
---
test-case: movsx8 register to 64 bits

pre: ["r1.svalue=384", "r1.uvalue=384", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s8= r1

post:
  - r1.type=number
  - r1.svalue=384
  - r1.uvalue=384
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=-128
  - r2.uvalue=18446744073709551488
---
test-case: movsx16 register to 64 bits

pre: ["r1.svalue=98304", "r1.uvalue=98304", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s16= r1

post:
  - r1.type=number
  - r1.svalue=98304
  - r1.uvalue=98304
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=-32768
  - r2.uvalue=18446744073709518848
---
test-case: movsx32 register to 64 bits

pre: ["r1.svalue=2147483648", "r1.uvalue=2147483648", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s32= r1

post:
  - r1.type=number
  - r1.svalue=2147483648
  - r1.uvalue=2147483648
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=-2147483648
  - r2.uvalue=18446744071562067968
---
test-case: movsx32 register with a non-number

pre: []

code:
  <start>: |
    r2 s32= r1

post: []

messages:
  - "0:  (r1.type == number)"
---
test-case: movsx8 register range to 32 bits without wrap

pre: ["r1.svalue=[128, 130]", "r1.uvalue=[128, 130]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    w2 s8= r1

post:
  - r1.type=number
  - r1.svalue=[128, 130]
  - r1.uvalue=[128, 130]
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=[4294967168, 4294967170]
  - r2.uvalue=[4294967168, 4294967170]
  - r2.svalue=r2.uvalue
---
test-case: movsx8 register range to 32 bits with wrap

pre: ["r1.svalue=[255, 257]", "r1.uvalue=[255, 257]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    w2 s8= r1

post:
  - r1.type=number
  - r1.svalue=[255, 257]
  - r1.uvalue=[255, 257]
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=[0, 4294967295]
  - r2.uvalue=[0, 4294967295]
  - r2.svalue=r2.uvalue
---
test-case: movsx16 register range to 32 bits without wrap

pre: ["r1.svalue=[32768, 32770]", "r1.uvalue=[32768, 32770]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    w2 s16= r1

post:
  - r1.type=number
  - r1.svalue=[32768, 32770]
  - r1.uvalue=[32768, 32770]
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=[4294934528, 4294934530]
  - r2.uvalue=[4294934528, 4294934530]
  - r2.svalue=r2.uvalue
---
test-case: movsx16 register range to 32 bits with wrap

pre: ["r1.svalue=[65535, 65537]", "r1.uvalue=[65535, 65537]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    w2 s16= r1

post:
  - r1.type=number
  - r1.svalue=[65535, 65537]
  - r1.uvalue=[65535, 65537]
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=[0, 4294967295]
  - r2.uvalue=[0, 4294967295]
  - r2.svalue=r2.uvalue
---
test-case: movsx8 register range to 64 bits

pre: ["r1.svalue=[255, 257]", "r1.uvalue=[255, 257]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s8= r1

post:
  - r1.type=number
  - r1.svalue=[255, 257]
  - r1.uvalue=[255, 257]
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=[-1, 1]
---
test-case: movsx8 register full range to 64 bits

pre: ["r1.svalue=[255, 511]", "r1.uvalue=[255, 511]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s8= r1

post:
  - r1.type=number
  - r1.svalue=[255, 511]
  - r1.uvalue=[255, 511]
  - r1.svalue=r1.uvalue
  - r2.type=number
---
test-case: movsx16 register range to 64 bits

pre: ["r1.svalue=[65535, 65537]", "r1.uvalue=[65535, 65537]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s16= r1

post:
  - r1.type=number
  - r1.svalue=[65535, 65537]
  - r1.uvalue=[65535, 65537]
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=[-1, 1]
---
test-case: movsx16 register full range to 64 bits

pre: ["r1.svalue=[65535, 131071]", "r1.uvalue=[65535, 131071]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s16= r1

post:
  - r1.type=number
  - r1.svalue=[65535, 131071]
  - r1.uvalue=[65535, 131071]
  - r1.svalue=r1.uvalue
  - r2.type=number
---
test-case: movsx32 register range to 64 bits

pre: ["r1.svalue=[4294967295, 4294967297]", "r1.uvalue=[4294967295, 4294967297]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s32= r1

post:
  - r1.type=number
  - r1.svalue=[4294967295, 4294967297]
  - r1.uvalue=[4294967295, 4294967297]
  - r1.svalue=r1.uvalue
  - r2.type=number
  - r2.svalue=[-1, 1]
---
test-case: movsx32 register full range to 64 bits

pre: ["r1.svalue=[4294967295, 8589934591]", "r1.uvalue=[4294967295, 8589934591]", "r1.type=number", "r1.svalue=r1.uvalue"]

code:
  <start>: |
    r2 s32= r1

post:
  - r1.type=number
  - r1.svalue=[4294967295, 8589934591]
  - r1.uvalue=[4294967295, 8589934591]
  - r1.svalue=r1.uvalue
  - r2.type=number
