# Copyright (c) Prevail Verifier contributors.
# SPDX-License-Identifier: MIT
---
test-case: callx bpf_map_lookup_elem

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r8.type=number", "r8.svalue=1", "r8.uvalue=1",
      "s[504...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r0.type=shared
  - r0.shared_offset=0
  - r0.shared_region_size=4
  - r0.svalue=[0, 2147418112]
  - r0.uvalue=r0.svalue
  - r8.type=number
  - r8.svalue=1
  - r8.uvalue=1
  - s[504...511].type=number
---
test-case: callx bpf_map_lookup_elem shared key

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=shared", "r2.shared_offset=0", "r2.shared_region_size=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=[1, 2147418112]",
      "r8.type=number", "r8.svalue=1", "r8.uvalue=1"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r0.type=shared
  - r0.shared_offset=0
  - r0.shared_region_size=4
  - r0.svalue=[0, 2147418112]
  - r0.uvalue=r0.svalue
  - r8.type=number
  - r8.svalue=1
  - r8.uvalue=1
---
test-case: callx bpf_map_lookup_elem packet key

pre: ["meta_offset=0",
      "r1.type=map_fd", "r1.map_fd=1",
      "r2.type=packet", "r2.packet_offset=0", "packet_size=4",
      "r8.type=number", "r8.svalue=1", "r8.uvalue=1"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r0.type=shared
  - r0.shared_offset=0
  - r0.shared_region_size=4
  - r0.svalue=[0, 2147418112]
  - r0.uvalue=r0.svalue
  - meta_offset=0
  - packet_size=4
  - r8.type=number
  - r8.svalue=1
  - r8.uvalue=1
---
test-case: callx bpf_map_lookup_elem shared key - maybe null

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=shared", "r2.shared_offset=0", "r2.shared_region_size=4", "r2.svalue=[0, 2147418112]", "r2.uvalue=[0, 2147418112]",
      "r8.type=number", "r8.svalue=1", "r8.uvalue=1"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r0.type=shared
  - r0.shared_offset=0
  - r0.shared_region_size=4
  - r0.svalue=[0, 2147418112]
  - r0.uvalue=r0.svalue
  - r8.type=number
  - r8.svalue=1
  - r8.uvalue=1

messages:
  - "0: Possible null access (within stack(r2:key_size(r1)))"
---
test-case: callx bpf_map_lookup_elem shared key - too small

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=shared", "r2.shared_offset=0", "r2.shared_region_size=2", "r2.svalue=[1, 2147418112]", "r2.uvalue=[1, 2147418112]",
      "r8.type=number", "r8.svalue=1", "r8.uvalue=1"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r0.type=shared
  - r0.shared_offset=0
  - r0.shared_region_size=4
  - r0.svalue=[0, 2147418112]
  - r0.uvalue=r0.svalue
  - r8.type=number
  - r8.svalue=1
  - r8.uvalue=1

messages:
  - "0: Upper bound must be at most r2.shared_region_size (within stack(r2:key_size(r1)))"
---
test-case: callx bpf_map_lookup_elem shared key - too small

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=shared", "r2.shared_offset=-2", "r2.shared_region_size=4", "r2.svalue=[1, 2147418112]", "r2.uvalue=[1, 2147418112]",
      "r8.type=number", "r8.svalue=1", "r8.uvalue=1"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r0.type=shared
  - r0.shared_offset=0
  - r0.shared_region_size=4
  - r0.svalue=[0, 2147418112]
  - r0.uvalue=r0.svalue
  - r8.type=number
  - r8.svalue=1
  - r8.uvalue=1

messages:
  - "0: Lower bound must be at least 0 (within stack(r2:key_size(r1)))"
---
test-case: callx 0

pre: ["r8.type=number", "r8.svalue=1000", "r8.uvalue=1000"]

code:
  <start>: |
    callx r8

post:
  - r8.type=number
  - r8.svalue=1000
  - r8.uvalue=1000

messages:
  - "0: invalid helper function id 1000 (r8.type is helper)"
---
test-case: callx with invalid id

pre: ["r8.type=number", "r8.svalue=1000", "r8.uvalue=1000"]

code:
  <start>: |
    callx r8

post:
  - r8.type=number
  - r8.svalue=1000
  - r8.uvalue=1000

messages:
  - "0: invalid helper function id 1000 (r8.type is helper)"
---
test-case: callx with interval

pre: ["r8.type=number", "r8.svalue=[1, 2]", "r8.uvalue=[1, 2]"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r8.type=number
  - r8.svalue=[1, 2]
  - r8.uvalue=[1, 2]

messages:
  - "0: callx helper function id is not a valid singleton (r8.type is helper)"
---
test-case: callx bpf_map_lookup_elem with non-numeric stack key

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack",
      "r8.type=number", "r8.svalue=1", "r8.uvalue=1"]

code:
  <start>: |
    callx r8; bpf_map_lookup_elem

post:
  - r0.type=shared
  - r0.shared_offset=0
  - r0.shared_region_size=4
  - r0.svalue=[0, 2147418112]
  - r0.uvalue=r0.svalue
  - r8.type=number
  - r8.svalue=1
  - r8.uvalue=1

messages:
  - "0: Illegal map update with a non-numerical value [-oo-oo) (within stack(r2:key_size(r1)))"
---
test-case: callx bpf_map_update_elem with numeric stack value

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=stack", "r3.stack_offset=496",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "r10.type=stack", "r10.stack_offset=512",
      "s[496...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[496...511].type=number
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2
  - r10.type=stack
  - r10.stack_offset=512

---
test-case: callx bpf_map_update_elem with shared value

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=shared", "r3.shared_offset=0", "r3.shared_region_size=4", "r3.svalue=[1, 2147418112]", "r3.uvalue=[1, 2147418112]",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "s[496...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[496...511].type=number
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2

---
test-case: callx bpf_map_update_elem with shared value too small

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=shared", "r3.shared_offset=0", "r3.shared_region_size=2", "r3.svalue=[1, 2147418112]", "r3.uvalue=[1, 2147418112]",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "s[496...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[496...511].type=number
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2

messages:
  - "0: Upper bound must be at most r3.shared_region_size (within stack(r3:value_size(r1)))"

---
test-case: callx bpf_map_update_elem with shared value larger than target region

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=shared", "r3.shared_offset=0", "r3.shared_region_size=64", "r3.svalue=[1, 2147418112]", "r3.uvalue=[1, 2147418112]",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "s[496...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[496...511].type=number
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2

---
test-case: callx bpf_map_update_elem with shared value may be null

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=shared", "r3.shared_offset=0", "r3.shared_region_size=4", "r3.svalue=[0, 2147418112]", "r3.uvalue=[0, 2147418112]",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "s[496...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[496...511].type=number
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2

messages:
  - "0: Possible null access (within stack(r3:value_size(r1)))"

---
test-case: callx bpf_map_update_elem with packet value

pre: ["meta_offset=0",
      "r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=packet", "r3.packet_offset=0", "packet_size=4",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "s[496...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[496...511].type=number
  - meta_offset=0
  - packet_size=4
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2
---
test-case: callx bpf_map_update_elem with non-numeric stack value

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=stack", "r3.stack_offset=496",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "s[504...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[504...511].type=number
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2

messages:
  - "0: Illegal map update with a non-numerical value [496-500) (within stack(r3:value_size(r1)))"
---
test-case: callx bpf_map_update_elem with context value

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=ctx", "r3.ctx_offset=0",
      "r4.type=number",
      "r8.type=number", "r8.svalue=2", "r8.uvalue=2",
      "s[504...511].type=number"]

code:
  <start>: |
    callx r8; bpf_map_update_elem

post:
  - r0.type=number
  - s[504...511].type=number
  - r8.type=number
  - r8.svalue=2
  - r8.uvalue=2

messages:
  - "0: Invalid type (r3.type in {stack, packet, shared})"
  - "0: Only stack or packet can be used as a parameter (within stack(r3:value_size(r1)))"
---
test-case: callx bpf_ringbuf_output with numeric stack value

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=number", "r3.svalue=8", "r3.uvalue=8",
      "r4.type=number",
      "r8.type=number", "r8.svalue=130", "r8.uvalue=130",
      "r10.type=stack", "r10.stack_offset=512",
      "s[504...511].type=number"]

code:
  <start>: |
    callx r8; bpf_ringbuf_output

post:
  - r0.type=number
  - r8.type=number
  - r8.svalue=130
  - r8.uvalue=130
  - r10.type=stack
  - r10.stack_offset=512
  - s[504...511].type=number
---
test-case: callx bpf_ringbuf_output with non-numeric stack value

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=number", "r3.svalue=8", "r3.uvalue=8",
      "r4.type=number",
      "r8.type=number", "r8.svalue=130", "r8.uvalue=130",
      "r10.type=stack", "r10.stack_offset=512"]

code:
  <start>: |
    callx r8; bpf_ringbuf_output

post:
  - r0.type=number
  - r8.type=number
  - r8.svalue=130
  - r8.uvalue=130
  - r10.type=stack
  - r10.stack_offset=512

messages:
  - "0: Stack content is not numeric (valid_access(r2.offset, width=r3) for read)"
---
test-case: callx bpf_ringbuf_output with context value

pre: ["r1.type=map_fd", "r1.map_fd=1",
      "r2.type=ctx", "r2.ctx_offset=0",
      "r3.type=number", "r3.svalue=8", "r3.uvalue=8",
      "r4.type=number",
      "r8.type=number", "r8.svalue=130", "r8.uvalue=130",
      "s[504...511].type=number"]

code:
  <start>: |
    callx r8; bpf_ringbuf_output

post:
  - r0.type=number
  - r8.type=number
  - r8.svalue=130
  - r8.uvalue=130
  - s[504...511].type=number

messages:
  - "0: Invalid type (r2.type in {stack, packet, shared})"
---
test-case: callx bpf_get_stack

pre: ["r1.type=ctx", "r1.ctx_offset=0",
      "r2.type=stack", "r2.stack_offset=504",
      "r3.type=number", "r3.svalue=8", "r3.uvalue=8",
      "r4.type=number",
      "r8.type=number", "r8.svalue=67", "r8.uvalue=67"]

code:
  <start>: |
    callx r8; bpf_get_stack

post:
  - r0.type=number
  - r8.type=number
  - r8.svalue=67
  - r8.uvalue=67
  - s[504...511].type=number
---
test-case: callx bpf_get_stack overwriting ctx

pre: ["r1.type=ctx", "r1.ctx_offset=0",
      "r2.type=ctx", "r2.ctx_offset=0",
      "r3.type=number", "r3.svalue=8", "r3.uvalue=8",
      "r4.type=number",
      "r8.type=number", "r8.svalue=67", "r8.uvalue=67"]

code:
  <start>: |
    callx r8; bpf_get_stack

post:
  - r0.type=number
  - r8.type=number
  - r8.svalue=67
  - r8.uvalue=67

messages:
  - "0: Invalid type (r2.type in {stack, packet, shared})"
---
test-case: callx bpf_get_stack writing into shared memory

pre: ["r1.type=ctx", "r1.ctx_offset=0",
      "r2.type=shared", "r2.shared_offset=0", "r2.shared_region_size=64", "r2.svalue=[1, 2147418112]", "r2.uvalue=[1, 2147418112]",
      "r3.type=number", "r3.svalue=64", "r3.uvalue=64",
      "r4.type=number",
      "r8.type=number", "r8.svalue=67", "r8.uvalue=67"]

code:
  <start>: |
    callx r8; bpf_get_stack, doesn't this leak pointers into the shared memory?

post:
  - r0.type=number
  - r8.type=number
  - r8.svalue=67
  - r8.uvalue=67
